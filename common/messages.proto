// sets the .proto file syntax version
syntax = "proto3";

// sets the output golang package name
option go_package = "github.com/borderzero/border0-proto/common";

// sets the protobuf package name (i.e. definitions namespace)
package border0.common.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

message DiscoveryDetailsMessage {
  bool discoverable = 1;                          // whether the peer should be returned along with the networks it's in
  string endpoint_public_udp4 = 2;                // the peer's public IP WireGuard endpoint (IPv4 + port) discovered via STUN
  string endpoint_public_udp6 = 3;                // the peer's public IP WireGuard endpoint (IPv6 + port) discovered via STUN
  string public_key = 4;                          // the public key of the peer, only used in connector
  repeated WireGuardEndpointAddr wg_ep_addrs = 5; // all ip address and port combinations that the peer can use to tx/rx traffic
}

message HeartbeatMessage {}

message StatsMessage {
    oneof StatsMessageType {
        NetworkDeviceStatsMessage network_device_stats = 1;
        SocketsStatsMessage sockets_stats = 2;
    }
}

message NetworkDeviceStatsMessage {
    google.protobuf.Timestamp timestamp = 1;
    uint64 bytes_in = 2;
    uint64 bytes_out = 3;
    uint64 packets_in = 4;
    uint64 packets_out = 5;
}

message SocketStatsMessage {
  google.protobuf.Timestamp timestamp = 1;
  uint64 bytes_in = 2;
  uint64 bytes_out = 3;
  uint64 packets_in = 4;
  uint64 packets_out = 5;
  string socket_id = 6;
}

message SocketsStatsMessage {
    repeated SocketStatsMessage socket_stats = 1;
}

message PeerOnlineMessage {
  string network_id = 1;
  WireGuardPeer peer = 2;
}

message PeerOfflineMessage {
  string network_id = 1;
  string peer_public_key = 2;
}

message NetworkStateMessage {
  string network_id = 1;
  string network_cidr_v4 = 2;
  string network_cidr_v6 = 3;
  string self_ipv4 = 4;
  string self_ipv6 = 5;
  repeated WireGuardPeer online_peers = 6;
  string network_resources_cidr_v4 = 7;
  string network_resources_cidr_v6 = 8;
  repeated Service standalone_services = 9;
}

message WireGuardPeer {
  string public_key = 1;                               // the public key of the peer, used for identification and encryption
  string ipv4 = 2;                                     // the peer's (private) IPv4 address in the WireGuard network
  string ipv6 = 3;                                     // the peer's (private) IPv6 address in the WireGuard network
  uint32 persistent_keepalive_interval_seconds = 5;    // the interval for sending keepalive packets (0 means disabled)
  PeerType type = 8;                                   // client or connector
  repeated Service services = 9;                       // applicable only when PeerType == PEER_TYPE_CONNECTOR
  string name = 10;                                    // device (client or connector) name
  repeated WireGuardEndpointAddr wg_ep_addrs = 11;     // all ip address and port combinations that the peer can use to tx/rx traffic

  // DEPRECATED: The list of allowed IPs (for WireGuard configuration) is now built on the receiver of this
  // message based on the ipv4, ipv6, service addresses (v4 and/or v6), and subnet routes (v4 and/or v6).
  //
  // The peer's list of routes (in CIDR notation) to be routed through this peer. Most
  // peers will just have their own border0-private-network IPv4/32 and IPv6/128.
  repeated string allowed_ips = 4 [deprecated = true];

  // DEPRECATED: All addresses are now part of wg_ep_addrs.
  //
  // The peer's public IP WireGuard endpoint (IPv4 + port) discovered via STUN.
  string public_udp4_endpoint = 6 [deprecated = true];

  // DEPRECATED: All addresses are now part of wg_ep_addrs.
  //
  // The peer's public IP WireGuard endpoint (IPv6 + port) discovered via STUN.
  string public_udp6_endpoint = 7 [deprecated = true];
}

message Service {
  string name = 1;
  string type = 2;
  string ipv4 = 3;
  string ipv6 = 4;
  repeated string subnet_routes = 5; // applicable only to services of type SUBNET_ROUTES
  string dns_name = 6;
  string upstream_type = 7;
  uint32 upstream_port = 8;
  bool has_upstream_username = 9;
  string upstream_ssh_type = 10;
  map<string, string> tags = 11;
  repeated IPAddressWithMetadata public_ips = 12;
  string display_name = 13;
  string database_name = 14;
}

message IPAddressWithMetadata {
  string ip_address = 1;
  IPAddressType type = 2;
  google.protobuf.Struct metadata = 3;
}

message WireGuardEndpointAddr {
  bool from_stun = 1;    // true if address was discovered via STUN
  string iface_name = 2; // the name of the local interface that has the address (e.g., "eth0"), empty if from_stun is true.
  string iface_cidr = 3; // the CIDR block this IP belongs to (e.g., "192.168.0.0/24"), empty if from_stun is true.
  string ip_address = 4; // the actual IP address
  uint32 port = 5;       // the UDP port number used for WireGuard
}

enum IPAddressType {
   IPV4 = 0;
   IPV6 = 1;
}

enum PeerType {
  PEER_TYPE_UNKNOWN = 0;
  PEER_TYPE_DEVICE = 1;
  PEER_TYPE_CONNECTOR = 2;
}

enum DisconnectionReason {
  UNKNOWN = 0;
  SERVER_SHUTDOWN = 1;
  NEWER_CONNECTION = 2;
}

message DisconnectMessage {
  DisconnectionReason reason = 1;
}

message Group {
  string uuid = 1;
  string name = 2;
  string type = 3;
  string prefix = 4;
}
