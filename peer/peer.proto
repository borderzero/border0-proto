// sets the .proto file syntax version
syntax = "proto3";

// sets the output golang package name
option go_package = "github.com/borderzero/border0-proto/peer";

// sets the protobuf package name (i.e. definitions namespace)
package border0.peer.v1;

// the stream (rpc) service for the Border0 api to manage peers/devices
service PeerService {
  rpc ControlStream(stream ClientToServerMessage) returns (stream ServerToClientMessage);
}

// messages from clients to the server (api)
message ClientToServerMessage {
  oneof Message {
    AuthChallengeSolution authChallenge = 1;
    GetPeersRequest peers = 2;
    HeartbeatRequest heartbeat = 3;
  }
}

// messages from the server (api) to clients
message ServerToClientMessage {
  oneof Message {
    AuthChallenge authChallenge = 1;
    GetPeersResponse peers = 2;
    HeartbeatResponse heartbeat = 3;
  }
}

message AuthChallenge {
  string challenge = 1;
  string serverPublicKey = 2;
}

message AuthChallengeSolution {
  string solved = 1;
}

message HeartbeatRequest {}
message HeartbeatResponse {}

message GetPeersRequest {}

message GetPeersResponse {
  repeated WireGuardPeer peers = 1;
}

message WireGuardPeer {
  string public_key = 1;           // the public key of the peer, used for identification and encryption
  string endpoint = 2;             // the endpoint (IP + port) to send packets to for the peer
  repeated string allowed_ips = 3; // list of routes (CIDRs) to be routed through this peer (most peers will just have their own IP/32)
  uint32 persistent_keepalive = 4; // the interval (seconds) for sending keepalive packets (0 means disabled)
}