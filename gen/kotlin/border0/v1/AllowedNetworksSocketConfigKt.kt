//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: connector.proto

package border0.v1;

@kotlin.jvm.JvmName("-initializeallowedNetworksSocketConfig")
public inline fun allowedNetworksSocketConfig(block: border0.v1.AllowedNetworksSocketConfigKt.Dsl.() -> kotlin.Unit): border0.v1.Connector.AllowedNetworksSocketConfig =
  border0.v1.AllowedNetworksSocketConfigKt.Dsl._create(border0.v1.Connector.AllowedNetworksSocketConfig.newBuilder()).apply { block() }._build()
public object AllowedNetworksSocketConfigKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: border0.v1.Connector.AllowedNetworksSocketConfig.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: border0.v1.Connector.AllowedNetworksSocketConfig.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): border0.v1.Connector.AllowedNetworksSocketConfig = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class SocketsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>map&lt;string, .border0.v1.AllowedNetworksSubnets&gt; sockets = 1;</code>
     */
     public val sockets: com.google.protobuf.kotlin.DslMap<kotlin.String, border0.v1.Connector.AllowedNetworksSubnets, SocketsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getSocketsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getSocketsMap()
      )
    /**
     * <code>map&lt;string, .border0.v1.AllowedNetworksSubnets&gt; sockets = 1;</code>
     */
    @JvmName("putSockets")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, border0.v1.Connector.AllowedNetworksSubnets, SocketsProxy>
      .put(key: kotlin.String, value: border0.v1.Connector.AllowedNetworksSubnets) {
         _builder.putSockets(key, value)
       }
    /**
     * <code>map&lt;string, .border0.v1.AllowedNetworksSubnets&gt; sockets = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setSockets")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, border0.v1.Connector.AllowedNetworksSubnets, SocketsProxy>
      .set(key: kotlin.String, value: border0.v1.Connector.AllowedNetworksSubnets) {
         put(key, value)
       }
    /**
     * <code>map&lt;string, .border0.v1.AllowedNetworksSubnets&gt; sockets = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeSockets")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, border0.v1.Connector.AllowedNetworksSubnets, SocketsProxy>
      .remove(key: kotlin.String) {
         _builder.removeSockets(key)
       }
    /**
     * <code>map&lt;string, .border0.v1.AllowedNetworksSubnets&gt; sockets = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllSockets")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, border0.v1.Connector.AllowedNetworksSubnets, SocketsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, border0.v1.Connector.AllowedNetworksSubnets>) {
         _builder.putAllSockets(map)
       }
    /**
     * <code>map&lt;string, .border0.v1.AllowedNetworksSubnets&gt; sockets = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearSockets")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, border0.v1.Connector.AllowedNetworksSubnets, SocketsProxy>
      .clear() {
         _builder.clearSockets()
       }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun border0.v1.Connector.AllowedNetworksSocketConfig.copy(block: border0.v1.AllowedNetworksSocketConfigKt.Dsl.() -> kotlin.Unit): border0.v1.Connector.AllowedNetworksSocketConfig =
  border0.v1.AllowedNetworksSocketConfigKt.Dsl._create(this.toBuilder()).apply { block() }._build()

