//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: connector.proto

package border0.v1;

@kotlin.jvm.JvmName("-initializeupdateConfig")
public inline fun updateConfig(block: border0.v1.UpdateConfigKt.Dsl.() -> kotlin.Unit): border0.v1.Connector.UpdateConfig =
  border0.v1.UpdateConfigKt.Dsl._create(border0.v1.Connector.UpdateConfig.newBuilder()).apply { block() }._build()
public object UpdateConfigKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: border0.v1.Connector.UpdateConfig.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: border0.v1.Connector.UpdateConfig.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): border0.v1.Connector.UpdateConfig = _builder.build()

    /**
     * <code>.border0.v1.Action action = 1;</code>
     */
    public var action: border0.v1.Connector.Action
      @JvmName("getAction")
      get() = _builder.getAction()
      @JvmName("setAction")
      set(value) {
        _builder.setAction(value)
      }
    /**
     * <code>.border0.v1.Action action = 1;</code>
     */
    public fun clearAction() {
      _builder.clearAction()
    }

    /**
     * <code>.border0.v1.PluginConfig plugin_config = 2;</code>
     */
    public var pluginConfig: border0.v1.Connector.PluginConfig
      @JvmName("getPluginConfig")
      get() = _builder.getPluginConfig()
      @JvmName("setPluginConfig")
      set(value) {
        _builder.setPluginConfig(value)
      }
    /**
     * <code>.border0.v1.PluginConfig plugin_config = 2;</code>
     */
    public fun clearPluginConfig() {
      _builder.clearPluginConfig()
    }
    /**
     * <code>.border0.v1.PluginConfig plugin_config = 2;</code>
     * @return Whether the pluginConfig field is set.
     */
    public fun hasPluginConfig(): kotlin.Boolean {
      return _builder.hasPluginConfig()
    }

    /**
     * <code>.border0.v1.SocketConfig socket_config = 3;</code>
     */
    public var socketConfig: border0.v1.Connector.SocketConfig
      @JvmName("getSocketConfig")
      get() = _builder.getSocketConfig()
      @JvmName("setSocketConfig")
      set(value) {
        _builder.setSocketConfig(value)
      }
    /**
     * <code>.border0.v1.SocketConfig socket_config = 3;</code>
     */
    public fun clearSocketConfig() {
      _builder.clearSocketConfig()
    }
    /**
     * <code>.border0.v1.SocketConfig socket_config = 3;</code>
     * @return Whether the socketConfig field is set.
     */
    public fun hasSocketConfig(): kotlin.Boolean {
      return _builder.hasSocketConfig()
    }
    public val configTypeCase: border0.v1.Connector.UpdateConfig.ConfigTypeCase
      @JvmName("getConfigTypeCase")
      get() = _builder.getConfigTypeCase()

    public fun clearConfigType() {
      _builder.clearConfigType()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun border0.v1.Connector.UpdateConfig.copy(block: border0.v1.UpdateConfigKt.Dsl.() -> kotlin.Unit): border0.v1.Connector.UpdateConfig =
  border0.v1.UpdateConfigKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val border0.v1.Connector.UpdateConfigOrBuilder.pluginConfigOrNull: border0.v1.Connector.PluginConfig?
  get() = if (hasPluginConfig()) getPluginConfig() else null

public val border0.v1.Connector.UpdateConfigOrBuilder.socketConfigOrNull: border0.v1.Connector.SocketConfig?
  get() = if (hasSocketConfig()) getSocketConfig() else null

