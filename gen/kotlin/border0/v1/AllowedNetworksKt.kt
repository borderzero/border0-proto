//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: connector.proto

package border0.v1;

@kotlin.jvm.JvmName("-initializeallowedNetworks")
public inline fun allowedNetworks(block: border0.v1.AllowedNetworksKt.Dsl.() -> kotlin.Unit): border0.v1.Connector.AllowedNetworks =
  border0.v1.AllowedNetworksKt.Dsl._create(border0.v1.Connector.AllowedNetworks.newBuilder()).apply { block() }._build()
public object AllowedNetworksKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: border0.v1.Connector.AllowedNetworks.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: border0.v1.Connector.AllowedNetworks.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): border0.v1.Connector.AllowedNetworks = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class DevicesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>map&lt;string, .border0.v1.AllowedNetworksSocketConfig&gt; devices = 1;</code>
     */
     public val devices: com.google.protobuf.kotlin.DslMap<kotlin.String, border0.v1.Connector.AllowedNetworksSocketConfig, DevicesProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getDevicesMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getDevicesMap()
      )
    /**
     * <code>map&lt;string, .border0.v1.AllowedNetworksSocketConfig&gt; devices = 1;</code>
     */
    @JvmName("putDevices")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, border0.v1.Connector.AllowedNetworksSocketConfig, DevicesProxy>
      .put(key: kotlin.String, value: border0.v1.Connector.AllowedNetworksSocketConfig) {
         _builder.putDevices(key, value)
       }
    /**
     * <code>map&lt;string, .border0.v1.AllowedNetworksSocketConfig&gt; devices = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setDevices")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, border0.v1.Connector.AllowedNetworksSocketConfig, DevicesProxy>
      .set(key: kotlin.String, value: border0.v1.Connector.AllowedNetworksSocketConfig) {
         put(key, value)
       }
    /**
     * <code>map&lt;string, .border0.v1.AllowedNetworksSocketConfig&gt; devices = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeDevices")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, border0.v1.Connector.AllowedNetworksSocketConfig, DevicesProxy>
      .remove(key: kotlin.String) {
         _builder.removeDevices(key)
       }
    /**
     * <code>map&lt;string, .border0.v1.AllowedNetworksSocketConfig&gt; devices = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllDevices")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, border0.v1.Connector.AllowedNetworksSocketConfig, DevicesProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, border0.v1.Connector.AllowedNetworksSocketConfig>) {
         _builder.putAllDevices(map)
       }
    /**
     * <code>map&lt;string, .border0.v1.AllowedNetworksSocketConfig&gt; devices = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearDevices")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, border0.v1.Connector.AllowedNetworksSocketConfig, DevicesProxy>
      .clear() {
         _builder.clearDevices()
       }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun border0.v1.Connector.AllowedNetworks.copy(block: border0.v1.AllowedNetworksKt.Dsl.() -> kotlin.Unit): border0.v1.Connector.AllowedNetworks =
  border0.v1.AllowedNetworksKt.Dsl._create(this.toBuilder()).apply { block() }._build()

