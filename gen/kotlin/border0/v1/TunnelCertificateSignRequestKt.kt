//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: connector.proto

package border0.v1;

@kotlin.jvm.JvmName("-initializetunnelCertificateSignRequest")
public inline fun tunnelCertificateSignRequest(block: border0.v1.TunnelCertificateSignRequestKt.Dsl.() -> kotlin.Unit): border0.v1.Connector.TunnelCertificateSignRequest =
  border0.v1.TunnelCertificateSignRequestKt.Dsl._create(border0.v1.Connector.TunnelCertificateSignRequest.newBuilder()).apply { block() }._build()
public object TunnelCertificateSignRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: border0.v1.Connector.TunnelCertificateSignRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: border0.v1.Connector.TunnelCertificateSignRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): border0.v1.Connector.TunnelCertificateSignRequest = _builder.build()

    /**
     * <code>string request_id = 1;</code>
     */
    public var requestId: kotlin.String
      @JvmName("getRequestId")
      get() = _builder.getRequestId()
      @JvmName("setRequestId")
      set(value) {
        _builder.setRequestId(value)
      }
    /**
     * <code>string request_id = 1;</code>
     */
    public fun clearRequestId() {
      _builder.clearRequestId()
    }

    /**
     * <code>string socket_id = 2;</code>
     */
    public var socketId: kotlin.String
      @JvmName("getSocketId")
      get() = _builder.getSocketId()
      @JvmName("setSocketId")
      set(value) {
        _builder.setSocketId(value)
      }
    /**
     * <code>string socket_id = 2;</code>
     */
    public fun clearSocketId() {
      _builder.clearSocketId()
    }

    /**
     * <code>string public_key = 3;</code>
     */
    public var publicKey: kotlin.String
      @JvmName("getPublicKey")
      get() = _builder.getPublicKey()
      @JvmName("setPublicKey")
      set(value) {
        _builder.setPublicKey(value)
      }
    /**
     * <code>string public_key = 3;</code>
     */
    public fun clearPublicKey() {
      _builder.clearPublicKey()
    }

    /**
     * <code>bool is_v2 = 4;</code>
     */
    public var isV2: kotlin.Boolean
      @JvmName("getIsV2")
      get() = _builder.getIsV2()
      @JvmName("setIsV2")
      set(value) {
        _builder.setIsV2(value)
      }
    /**
     * <code>bool is_v2 = 4;</code>
     */
    public fun clearIsV2() {
      _builder.clearIsV2()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun border0.v1.Connector.TunnelCertificateSignRequest.copy(block: border0.v1.TunnelCertificateSignRequestKt.Dsl.() -> kotlin.Unit): border0.v1.Connector.TunnelCertificateSignRequest =
  border0.v1.TunnelCertificateSignRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

