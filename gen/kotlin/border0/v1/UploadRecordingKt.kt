//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: connector.proto

package border0.v1;

@kotlin.jvm.JvmName("-initializeuploadRecording")
public inline fun uploadRecording(block: border0.v1.UploadRecordingKt.Dsl.() -> kotlin.Unit): border0.v1.Connector.UploadRecording =
  border0.v1.UploadRecordingKt.Dsl._create(border0.v1.Connector.UploadRecording.newBuilder()).apply { block() }._build()
public object UploadRecordingKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: border0.v1.Connector.UploadRecording.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: border0.v1.Connector.UploadRecording.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): border0.v1.Connector.UploadRecording = _builder.build()

    /**
     * <pre>
     * session identifier (unique globally)
     * </pre>
     *
     * <code>string session_key = 1;</code>
     */
    public var sessionKey: kotlin.String
      @JvmName("getSessionKey")
      get() = _builder.getSessionKey()
      @JvmName("setSessionKey")
      set(value) {
        _builder.setSessionKey(value)
      }
    /**
     * <pre>
     * session identifier (unique globally)
     * </pre>
     *
     * <code>string session_key = 1;</code>
     */
    public fun clearSessionKey() {
      _builder.clearSessionKey()
    }

    /**
     * <pre>
     * recording identifier (unique per-session)
     * </pre>
     *
     * <code>string recording_id = 2;</code>
     */
    public var recordingId: kotlin.String
      @JvmName("getRecordingId")
      get() = _builder.getRecordingId()
      @JvmName("setRecordingId")
      set(value) {
        _builder.setRecordingId(value)
      }
    /**
     * <pre>
     * recording identifier (unique per-session)
     * </pre>
     *
     * <code>string recording_id = 2;</code>
     */
    public fun clearRecordingId() {
      _builder.clearRecordingId()
    }

    /**
     * <pre>
     * actual recording bytes
     * </pre>
     *
     * <code>bytes recording = 3;</code>
     */
    public var recording: com.google.protobuf.ByteString
      @JvmName("getRecording")
      get() = _builder.getRecording()
      @JvmName("setRecording")
      set(value) {
        _builder.setRecording(value)
      }
    /**
     * <pre>
     * actual recording bytes
     * </pre>
     *
     * <code>bytes recording = 3;</code>
     */
    public fun clearRecording() {
      _builder.clearRecording()
    }

    /**
     * <pre>
     * type of the recording e.g. asciinema, log, etc...
     * </pre>
     *
     * <code>string recording_type = 4;</code>
     */
    public var recordingType: kotlin.String
      @JvmName("getRecordingType")
      get() = _builder.getRecordingType()
      @JvmName("setRecordingType")
      set(value) {
        _builder.setRecordingType(value)
      }
    /**
     * <pre>
     * type of the recording e.g. asciinema, log, etc...
     * </pre>
     *
     * <code>string recording_type = 4;</code>
     */
    public fun clearRecordingType() {
      _builder.clearRecordingType()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun border0.v1.Connector.UploadRecording.copy(block: border0.v1.UploadRecordingKt.Dsl.() -> kotlin.Unit): border0.v1.Connector.UploadRecording =
  border0.v1.UploadRecordingKt.Dsl._create(this.toBuilder()).apply { block() }._build()

