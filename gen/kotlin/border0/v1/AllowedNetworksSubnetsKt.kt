//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: connector.proto

package border0.v1;

@kotlin.jvm.JvmName("-initializeallowedNetworksSubnets")
public inline fun allowedNetworksSubnets(block: border0.v1.AllowedNetworksSubnetsKt.Dsl.() -> kotlin.Unit): border0.v1.Connector.AllowedNetworksSubnets =
  border0.v1.AllowedNetworksSubnetsKt.Dsl._create(border0.v1.Connector.AllowedNetworksSubnets.newBuilder()).apply { block() }._build()
public object AllowedNetworksSubnetsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: border0.v1.Connector.AllowedNetworksSubnets.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: border0.v1.Connector.AllowedNetworksSubnets.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): border0.v1.Connector.AllowedNetworksSubnets = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class SubnetsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated string subnets = 1;</code>
     * @return A list containing the subnets.
     */
    public val subnets: com.google.protobuf.kotlin.DslList<kotlin.String, SubnetsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getSubnetsList()
      )
    /**
     * <code>repeated string subnets = 1;</code>
     * @param value The subnets to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addSubnets")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, SubnetsProxy>.add(value: kotlin.String) {
      _builder.addSubnets(value)
    }
    /**
     * <code>repeated string subnets = 1;</code>
     * @param value The subnets to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignSubnets")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, SubnetsProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * <code>repeated string subnets = 1;</code>
     * @param values The subnets to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllSubnets")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, SubnetsProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllSubnets(values)
    }
    /**
     * <code>repeated string subnets = 1;</code>
     * @param values The subnets to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllSubnets")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, SubnetsProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * <code>repeated string subnets = 1;</code>
     * @param index The index to set the value at.
     * @param value The subnets to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setSubnets")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, SubnetsProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setSubnets(index, value)
    }/**
     * <code>repeated string subnets = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearSubnets")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, SubnetsProxy>.clear() {
      _builder.clearSubnets()
    }}
}
@kotlin.jvm.JvmSynthetic
public inline fun border0.v1.Connector.AllowedNetworksSubnets.copy(block: border0.v1.AllowedNetworksSubnetsKt.Dsl.() -> kotlin.Unit): border0.v1.Connector.AllowedNetworksSubnets =
  border0.v1.AllowedNetworksSubnetsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

