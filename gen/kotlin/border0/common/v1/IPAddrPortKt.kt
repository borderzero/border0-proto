//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: messages.proto

package border0.common.v1;

@kotlin.jvm.JvmName("-initializeiPAddrPort")
public inline fun iPAddrPort(block: border0.common.v1.IPAddrPortKt.Dsl.() -> kotlin.Unit): border0.common.v1.Messages.IPAddrPort =
  border0.common.v1.IPAddrPortKt.Dsl._create(border0.common.v1.Messages.IPAddrPort.newBuilder()).apply { block() }._build()
public object IPAddrPortKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: border0.common.v1.Messages.IPAddrPort.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: border0.common.v1.Messages.IPAddrPort.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): border0.common.v1.Messages.IPAddrPort = _builder.build()

    /**
     * <code>string interface = 1;</code>
     */
    public var interface_: kotlin.String
      @JvmName("getInterface_")
      get() = _builder.getInterface()
      @JvmName("setInterface_")
      set(value) {
        _builder.setInterface(value)
      }
    /**
     * <code>string interface = 1;</code>
     */
    public fun clearInterface_() {
      _builder.clearInterface()
    }

    /**
     * <code>string ip_address = 2;</code>
     */
    public var ipAddress: kotlin.String
      @JvmName("getIpAddress")
      get() = _builder.getIpAddress()
      @JvmName("setIpAddress")
      set(value) {
        _builder.setIpAddress(value)
      }
    /**
     * <code>string ip_address = 2;</code>
     */
    public fun clearIpAddress() {
      _builder.clearIpAddress()
    }

    /**
     * <code>uint32 port = 3;</code>
     */
    public var port: kotlin.Int
      @JvmName("getPort")
      get() = _builder.getPort()
      @JvmName("setPort")
      set(value) {
        _builder.setPort(value)
      }
    /**
     * <code>uint32 port = 3;</code>
     */
    public fun clearPort() {
      _builder.clearPort()
    }

    /**
     * <code>.border0.common.v1.IPAddressType ip_version = 4;</code>
     */
    public var ipVersion: border0.common.v1.Messages.IPAddressType
      @JvmName("getIpVersion")
      get() = _builder.getIpVersion()
      @JvmName("setIpVersion")
      set(value) {
        _builder.setIpVersion(value)
      }
    /**
     * <code>.border0.common.v1.IPAddressType ip_version = 4;</code>
     */
    public fun clearIpVersion() {
      _builder.clearIpVersion()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun border0.common.v1.Messages.IPAddrPort.copy(block: border0.common.v1.IPAddrPortKt.Dsl.() -> kotlin.Unit): border0.common.v1.Messages.IPAddrPort =
  border0.common.v1.IPAddrPortKt.Dsl._create(this.toBuilder()).apply { block() }._build()

