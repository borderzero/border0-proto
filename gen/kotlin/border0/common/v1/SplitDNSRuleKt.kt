//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: messages.proto

package border0.common.v1;

@kotlin.jvm.JvmName("-initializesplitDNSRule")
public inline fun splitDNSRule(block: border0.common.v1.SplitDNSRuleKt.Dsl.() -> kotlin.Unit): border0.common.v1.Messages.SplitDNSRule =
  border0.common.v1.SplitDNSRuleKt.Dsl._create(border0.common.v1.Messages.SplitDNSRule.newBuilder()).apply { block() }._build()
public object SplitDNSRuleKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: border0.common.v1.Messages.SplitDNSRule.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: border0.common.v1.Messages.SplitDNSRule.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): border0.common.v1.Messages.SplitDNSRule = _builder.build()

    /**
     * <pre>
     * Domain pattern (e.g., "example.com")
     * </pre>
     *
     * <code>string domain = 1;</code>
     */
    public var domain: kotlin.String
      @JvmName("getDomain")
      get() = _builder.getDomain()
      @JvmName("setDomain")
      set(value) {
        _builder.setDomain(value)
      }
    /**
     * <pre>
     * Domain pattern (e.g., "example.com")
     * </pre>
     *
     * <code>string domain = 1;</code>
     */
    public fun clearDomain() {
      _builder.clearDomain()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class DnsServersProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * DNS servers to use for this domain
     * </pre>
     *
     * <code>repeated string dns_servers = 2;</code>
     * @return A list containing the dnsServers.
     */
    public val dnsServers: com.google.protobuf.kotlin.DslList<kotlin.String, DnsServersProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getDnsServersList()
      )
    /**
     * <pre>
     * DNS servers to use for this domain
     * </pre>
     *
     * <code>repeated string dns_servers = 2;</code>
     * @param value The dnsServers to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addDnsServers")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, DnsServersProxy>.add(value: kotlin.String) {
      _builder.addDnsServers(value)
    }
    /**
     * <pre>
     * DNS servers to use for this domain
     * </pre>
     *
     * <code>repeated string dns_servers = 2;</code>
     * @param value The dnsServers to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignDnsServers")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, DnsServersProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * <pre>
     * DNS servers to use for this domain
     * </pre>
     *
     * <code>repeated string dns_servers = 2;</code>
     * @param values The dnsServers to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllDnsServers")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, DnsServersProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllDnsServers(values)
    }
    /**
     * <pre>
     * DNS servers to use for this domain
     * </pre>
     *
     * <code>repeated string dns_servers = 2;</code>
     * @param values The dnsServers to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllDnsServers")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, DnsServersProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * <pre>
     * DNS servers to use for this domain
     * </pre>
     *
     * <code>repeated string dns_servers = 2;</code>
     * @param index The index to set the value at.
     * @param value The dnsServers to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setDnsServers")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, DnsServersProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setDnsServers(index, value)
    }/**
     * <pre>
     * DNS servers to use for this domain
     * </pre>
     *
     * <code>repeated string dns_servers = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearDnsServers")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, DnsServersProxy>.clear() {
      _builder.clearDnsServers()
    }}
}
@kotlin.jvm.JvmSynthetic
public inline fun border0.common.v1.Messages.SplitDNSRule.copy(block: border0.common.v1.SplitDNSRuleKt.Dsl.() -> kotlin.Unit): border0.common.v1.Messages.SplitDNSRule =
  border0.common.v1.SplitDNSRuleKt.Dsl._create(this.toBuilder()).apply { block() }._build()

