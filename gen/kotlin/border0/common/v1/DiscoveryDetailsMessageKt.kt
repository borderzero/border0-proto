//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: messages.proto

package border0.common.v1;

@kotlin.jvm.JvmName("-initializediscoveryDetailsMessage")
public inline fun discoveryDetailsMessage(block: border0.common.v1.DiscoveryDetailsMessageKt.Dsl.() -> kotlin.Unit): border0.common.v1.Messages.DiscoveryDetailsMessage =
  border0.common.v1.DiscoveryDetailsMessageKt.Dsl._create(border0.common.v1.Messages.DiscoveryDetailsMessage.newBuilder()).apply { block() }._build()
public object DiscoveryDetailsMessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: border0.common.v1.Messages.DiscoveryDetailsMessage.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: border0.common.v1.Messages.DiscoveryDetailsMessage.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): border0.common.v1.Messages.DiscoveryDetailsMessage = _builder.build()

    /**
     * <pre>
     * whether the peer should be returned along with the networks it's in
     * </pre>
     *
     * <code>bool discoverable = 1;</code>
     */
    public var discoverable: kotlin.Boolean
      @JvmName("getDiscoverable")
      get() = _builder.getDiscoverable()
      @JvmName("setDiscoverable")
      set(value) {
        _builder.setDiscoverable(value)
      }
    /**
     * <pre>
     * whether the peer should be returned along with the networks it's in
     * </pre>
     *
     * <code>bool discoverable = 1;</code>
     */
    public fun clearDiscoverable() {
      _builder.clearDiscoverable()
    }

    /**
     * <pre>
     * the endpoint (IPv4 + port) to send packets to for the peer
     * </pre>
     *
     * <code>string endpoint_public_udp4 = 2;</code>
     */
    public var endpointPublicUdp4: kotlin.String
      @JvmName("getEndpointPublicUdp4")
      get() = _builder.getEndpointPublicUdp4()
      @JvmName("setEndpointPublicUdp4")
      set(value) {
        _builder.setEndpointPublicUdp4(value)
      }
    /**
     * <pre>
     * the endpoint (IPv4 + port) to send packets to for the peer
     * </pre>
     *
     * <code>string endpoint_public_udp4 = 2;</code>
     */
    public fun clearEndpointPublicUdp4() {
      _builder.clearEndpointPublicUdp4()
    }

    /**
     * <pre>
     * the endpoint (IPv6 + port) to send packets to for the peer
     * </pre>
     *
     * <code>string endpoint_public_udp6 = 3;</code>
     */
    public var endpointPublicUdp6: kotlin.String
      @JvmName("getEndpointPublicUdp6")
      get() = _builder.getEndpointPublicUdp6()
      @JvmName("setEndpointPublicUdp6")
      set(value) {
        _builder.setEndpointPublicUdp6(value)
      }
    /**
     * <pre>
     * the endpoint (IPv6 + port) to send packets to for the peer
     * </pre>
     *
     * <code>string endpoint_public_udp6 = 3;</code>
     */
    public fun clearEndpointPublicUdp6() {
      _builder.clearEndpointPublicUdp6()
    }

    /**
     * <pre>
     * the public key of the peer, only used in connector
     * </pre>
     *
     * <code>string public_key = 4;</code>
     */
    public var publicKey: kotlin.String
      @JvmName("getPublicKey")
      get() = _builder.getPublicKey()
      @JvmName("setPublicKey")
      set(value) {
        _builder.setPublicKey(value)
      }
    /**
     * <pre>
     * the public key of the peer, only used in connector
     * </pre>
     *
     * <code>string public_key = 4;</code>
     */
    public fun clearPublicKey() {
      _builder.clearPublicKey()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun border0.common.v1.Messages.DiscoveryDetailsMessage.copy(block: border0.common.v1.DiscoveryDetailsMessageKt.Dsl.() -> kotlin.Unit): border0.common.v1.Messages.DiscoveryDetailsMessage =
  border0.common.v1.DiscoveryDetailsMessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

