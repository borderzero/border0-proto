//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: messages.proto

package border0.common.v1;

@kotlin.jvm.JvmName("-initializedNSConfigurationMessage")
public inline fun dNSConfigurationMessage(block: border0.common.v1.DNSConfigurationMessageKt.Dsl.() -> kotlin.Unit): border0.common.v1.Messages.DNSConfigurationMessage =
  border0.common.v1.DNSConfigurationMessageKt.Dsl._create(border0.common.v1.Messages.DNSConfigurationMessage.newBuilder()).apply { block() }._build()
public object DNSConfigurationMessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: border0.common.v1.Messages.DNSConfigurationMessage.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: border0.common.v1.Messages.DNSConfigurationMessage.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): border0.common.v1.Messages.DNSConfigurationMessage = _builder.build()

    /**
     * <pre>
     * Flag indicating if DNS management is enabled for the organization
     * </pre>
     *
     * <code>bool dns_management_enabled = 1;</code>
     */
    public var dnsManagementEnabled: kotlin.Boolean
      @JvmName("getDnsManagementEnabled")
      get() = _builder.getDnsManagementEnabled()
      @JvmName("setDnsManagementEnabled")
      set(value) {
        _builder.setDnsManagementEnabled(value)
      }
    /**
     * <pre>
     * Flag indicating if DNS management is enabled for the organization
     * </pre>
     *
     * <code>bool dns_management_enabled = 1;</code>
     */
    public fun clearDnsManagementEnabled() {
      _builder.clearDnsManagementEnabled()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class GlobalDnsServersProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * List of global DNS server IP addresses (IPv4/IPv6) to use for all queries
     * </pre>
     *
     * <code>repeated string global_dns_servers = 2;</code>
     * @return A list containing the globalDnsServers.
     */
    public val globalDnsServers: com.google.protobuf.kotlin.DslList<kotlin.String, GlobalDnsServersProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getGlobalDnsServersList()
      )
    /**
     * <pre>
     * List of global DNS server IP addresses (IPv4/IPv6) to use for all queries
     * </pre>
     *
     * <code>repeated string global_dns_servers = 2;</code>
     * @param value The globalDnsServers to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addGlobalDnsServers")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, GlobalDnsServersProxy>.add(value: kotlin.String) {
      _builder.addGlobalDnsServers(value)
    }
    /**
     * <pre>
     * List of global DNS server IP addresses (IPv4/IPv6) to use for all queries
     * </pre>
     *
     * <code>repeated string global_dns_servers = 2;</code>
     * @param value The globalDnsServers to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignGlobalDnsServers")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, GlobalDnsServersProxy>.plusAssign(value: kotlin.String) {
      add(value)
    }
    /**
     * <pre>
     * List of global DNS server IP addresses (IPv4/IPv6) to use for all queries
     * </pre>
     *
     * <code>repeated string global_dns_servers = 2;</code>
     * @param values The globalDnsServers to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllGlobalDnsServers")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, GlobalDnsServersProxy>.addAll(values: kotlin.collections.Iterable<kotlin.String>) {
      _builder.addAllGlobalDnsServers(values)
    }
    /**
     * <pre>
     * List of global DNS server IP addresses (IPv4/IPv6) to use for all queries
     * </pre>
     *
     * <code>repeated string global_dns_servers = 2;</code>
     * @param values The globalDnsServers to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllGlobalDnsServers")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<kotlin.String, GlobalDnsServersProxy>.plusAssign(values: kotlin.collections.Iterable<kotlin.String>) {
      addAll(values)
    }
    /**
     * <pre>
     * List of global DNS server IP addresses (IPv4/IPv6) to use for all queries
     * </pre>
     *
     * <code>repeated string global_dns_servers = 2;</code>
     * @param index The index to set the value at.
     * @param value The globalDnsServers to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setGlobalDnsServers")
    public operator fun com.google.protobuf.kotlin.DslList<kotlin.String, GlobalDnsServersProxy>.set(index: kotlin.Int, value: kotlin.String) {
      _builder.setGlobalDnsServers(index, value)
    }/**
     * <pre>
     * List of global DNS server IP addresses (IPv4/IPv6) to use for all queries
     * </pre>
     *
     * <code>repeated string global_dns_servers = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearGlobalDnsServers")
    public fun com.google.protobuf.kotlin.DslList<kotlin.String, GlobalDnsServersProxy>.clear() {
      _builder.clearGlobalDnsServers()
    }
    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class SplitDnsRulesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * List of domain-specific DNS routing rules
     * </pre>
     *
     * <code>repeated .border0.common.v1.SplitDNSRule split_dns_rules = 3;</code>
     */
     public val splitDnsRules: com.google.protobuf.kotlin.DslList<border0.common.v1.Messages.SplitDNSRule, SplitDnsRulesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getSplitDnsRulesList()
      )
    /**
     * <pre>
     * List of domain-specific DNS routing rules
     * </pre>
     *
     * <code>repeated .border0.common.v1.SplitDNSRule split_dns_rules = 3;</code>
     * @param value The splitDnsRules to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addSplitDnsRules")
    public fun com.google.protobuf.kotlin.DslList<border0.common.v1.Messages.SplitDNSRule, SplitDnsRulesProxy>.add(value: border0.common.v1.Messages.SplitDNSRule) {
      _builder.addSplitDnsRules(value)
    }
    /**
     * <pre>
     * List of domain-specific DNS routing rules
     * </pre>
     *
     * <code>repeated .border0.common.v1.SplitDNSRule split_dns_rules = 3;</code>
     * @param value The splitDnsRules to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignSplitDnsRules")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<border0.common.v1.Messages.SplitDNSRule, SplitDnsRulesProxy>.plusAssign(value: border0.common.v1.Messages.SplitDNSRule) {
      add(value)
    }
    /**
     * <pre>
     * List of domain-specific DNS routing rules
     * </pre>
     *
     * <code>repeated .border0.common.v1.SplitDNSRule split_dns_rules = 3;</code>
     * @param values The splitDnsRules to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllSplitDnsRules")
    public fun com.google.protobuf.kotlin.DslList<border0.common.v1.Messages.SplitDNSRule, SplitDnsRulesProxy>.addAll(values: kotlin.collections.Iterable<border0.common.v1.Messages.SplitDNSRule>) {
      _builder.addAllSplitDnsRules(values)
    }
    /**
     * <pre>
     * List of domain-specific DNS routing rules
     * </pre>
     *
     * <code>repeated .border0.common.v1.SplitDNSRule split_dns_rules = 3;</code>
     * @param values The splitDnsRules to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllSplitDnsRules")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<border0.common.v1.Messages.SplitDNSRule, SplitDnsRulesProxy>.plusAssign(values: kotlin.collections.Iterable<border0.common.v1.Messages.SplitDNSRule>) {
      addAll(values)
    }
    /**
     * <pre>
     * List of domain-specific DNS routing rules
     * </pre>
     *
     * <code>repeated .border0.common.v1.SplitDNSRule split_dns_rules = 3;</code>
     * @param index The index to set the value at.
     * @param value The splitDnsRules to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setSplitDnsRules")
    public operator fun com.google.protobuf.kotlin.DslList<border0.common.v1.Messages.SplitDNSRule, SplitDnsRulesProxy>.set(index: kotlin.Int, value: border0.common.v1.Messages.SplitDNSRule) {
      _builder.setSplitDnsRules(index, value)
    }
    /**
     * <pre>
     * List of domain-specific DNS routing rules
     * </pre>
     *
     * <code>repeated .border0.common.v1.SplitDNSRule split_dns_rules = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearSplitDnsRules")
    public fun com.google.protobuf.kotlin.DslList<border0.common.v1.Messages.SplitDNSRule, SplitDnsRulesProxy>.clear() {
      _builder.clearSplitDnsRules()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun border0.common.v1.Messages.DNSConfigurationMessage.copy(block: border0.common.v1.DNSConfigurationMessageKt.Dsl.() -> kotlin.Unit): border0.common.v1.Messages.DNSConfigurationMessage =
  border0.common.v1.DNSConfigurationMessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

