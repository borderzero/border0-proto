//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: device.proto

package border0.device.v1;

@kotlin.jvm.JvmName("-initializeserverToDeviceMessage")
public inline fun serverToDeviceMessage(block: border0.device.v1.ServerToDeviceMessageKt.Dsl.() -> kotlin.Unit): border0.device.v1.Device.ServerToDeviceMessage =
  border0.device.v1.ServerToDeviceMessageKt.Dsl._create(border0.device.v1.Device.ServerToDeviceMessage.newBuilder()).apply { block() }._build()
public object ServerToDeviceMessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: border0.device.v1.Device.ServerToDeviceMessage.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: border0.device.v1.Device.ServerToDeviceMessage.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): border0.device.v1.Device.ServerToDeviceMessage = _builder.build()

    /**
     * <code>.border0.device.v1.AuthChallengeMessage auth_challenge = 1;</code>
     */
    public var authChallenge: border0.device.v1.Device.AuthChallengeMessage
      @JvmName("getAuthChallenge")
      get() = _builder.getAuthChallenge()
      @JvmName("setAuthChallenge")
      set(value) {
        _builder.setAuthChallenge(value)
      }
    /**
     * <code>.border0.device.v1.AuthChallengeMessage auth_challenge = 1;</code>
     */
    public fun clearAuthChallenge() {
      _builder.clearAuthChallenge()
    }
    /**
     * <code>.border0.device.v1.AuthChallengeMessage auth_challenge = 1;</code>
     * @return Whether the authChallenge field is set.
     */
    public fun hasAuthChallenge(): kotlin.Boolean {
      return _builder.hasAuthChallenge()
    }

    /**
     * <code>.border0.common.v1.HeartbeatMessage heartbeat = 2;</code>
     */
    public var heartbeat: border0.common.v1.Messages.HeartbeatMessage
      @JvmName("getHeartbeat")
      get() = _builder.getHeartbeat()
      @JvmName("setHeartbeat")
      set(value) {
        _builder.setHeartbeat(value)
      }
    /**
     * <code>.border0.common.v1.HeartbeatMessage heartbeat = 2;</code>
     */
    public fun clearHeartbeat() {
      _builder.clearHeartbeat()
    }
    /**
     * <code>.border0.common.v1.HeartbeatMessage heartbeat = 2;</code>
     * @return Whether the heartbeat field is set.
     */
    public fun hasHeartbeat(): kotlin.Boolean {
      return _builder.hasHeartbeat()
    }

    /**
     * <code>.border0.common.v1.NetworkStateMessage network_state = 3;</code>
     */
    public var networkState: border0.common.v1.Messages.NetworkStateMessage
      @JvmName("getNetworkState")
      get() = _builder.getNetworkState()
      @JvmName("setNetworkState")
      set(value) {
        _builder.setNetworkState(value)
      }
    /**
     * <code>.border0.common.v1.NetworkStateMessage network_state = 3;</code>
     */
    public fun clearNetworkState() {
      _builder.clearNetworkState()
    }
    /**
     * <code>.border0.common.v1.NetworkStateMessage network_state = 3;</code>
     * @return Whether the networkState field is set.
     */
    public fun hasNetworkState(): kotlin.Boolean {
      return _builder.hasNetworkState()
    }

    /**
     * <code>.border0.common.v1.PeerOnlineMessage peer_online = 4;</code>
     */
    public var peerOnline: border0.common.v1.Messages.PeerOnlineMessage
      @JvmName("getPeerOnline")
      get() = _builder.getPeerOnline()
      @JvmName("setPeerOnline")
      set(value) {
        _builder.setPeerOnline(value)
      }
    /**
     * <code>.border0.common.v1.PeerOnlineMessage peer_online = 4;</code>
     */
    public fun clearPeerOnline() {
      _builder.clearPeerOnline()
    }
    /**
     * <code>.border0.common.v1.PeerOnlineMessage peer_online = 4;</code>
     * @return Whether the peerOnline field is set.
     */
    public fun hasPeerOnline(): kotlin.Boolean {
      return _builder.hasPeerOnline()
    }

    /**
     * <code>.border0.common.v1.PeerOfflineMessage peer_offline = 5;</code>
     */
    public var peerOffline: border0.common.v1.Messages.PeerOfflineMessage
      @JvmName("getPeerOffline")
      get() = _builder.getPeerOffline()
      @JvmName("setPeerOffline")
      set(value) {
        _builder.setPeerOffline(value)
      }
    /**
     * <code>.border0.common.v1.PeerOfflineMessage peer_offline = 5;</code>
     */
    public fun clearPeerOffline() {
      _builder.clearPeerOffline()
    }
    /**
     * <code>.border0.common.v1.PeerOfflineMessage peer_offline = 5;</code>
     * @return Whether the peerOffline field is set.
     */
    public fun hasPeerOffline(): kotlin.Boolean {
      return _builder.hasPeerOffline()
    }

    /**
     * <code>.border0.common.v1.DisconnectMessage disconnect = 6;</code>
     */
    public var disconnect: border0.common.v1.Messages.DisconnectMessage
      @JvmName("getDisconnect")
      get() = _builder.getDisconnect()
      @JvmName("setDisconnect")
      set(value) {
        _builder.setDisconnect(value)
      }
    /**
     * <code>.border0.common.v1.DisconnectMessage disconnect = 6;</code>
     */
    public fun clearDisconnect() {
      _builder.clearDisconnect()
    }
    /**
     * <code>.border0.common.v1.DisconnectMessage disconnect = 6;</code>
     * @return Whether the disconnect field is set.
     */
    public fun hasDisconnect(): kotlin.Boolean {
      return _builder.hasDisconnect()
    }

    /**
     * <code>.border0.device.v1.Service service = 7;</code>
     */
    public var service: border0.device.v1.Device.Service
      @JvmName("getService")
      get() = _builder.getService()
      @JvmName("setService")
      set(value) {
        _builder.setService(value)
      }
    /**
     * <code>.border0.device.v1.Service service = 7;</code>
     */
    public fun clearService() {
      _builder.clearService()
    }
    /**
     * <code>.border0.device.v1.Service service = 7;</code>
     * @return Whether the service field is set.
     */
    public fun hasService(): kotlin.Boolean {
      return _builder.hasService()
    }

    /**
     * <code>.border0.device.v1.OrgDetails org_details = 8;</code>
     */
    public var orgDetails: border0.device.v1.Device.OrgDetails
      @JvmName("getOrgDetails")
      get() = _builder.getOrgDetails()
      @JvmName("setOrgDetails")
      set(value) {
        _builder.setOrgDetails(value)
      }
    /**
     * <code>.border0.device.v1.OrgDetails org_details = 8;</code>
     */
    public fun clearOrgDetails() {
      _builder.clearOrgDetails()
    }
    /**
     * <code>.border0.device.v1.OrgDetails org_details = 8;</code>
     * @return Whether the orgDetails field is set.
     */
    public fun hasOrgDetails(): kotlin.Boolean {
      return _builder.hasOrgDetails()
    }
    public val messageCase: border0.device.v1.Device.ServerToDeviceMessage.MessageCase
      @JvmName("getMessageCase")
      get() = _builder.getMessageCase()

    public fun clearMessage() {
      _builder.clearMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun border0.device.v1.Device.ServerToDeviceMessage.copy(block: border0.device.v1.ServerToDeviceMessageKt.Dsl.() -> kotlin.Unit): border0.device.v1.Device.ServerToDeviceMessage =
  border0.device.v1.ServerToDeviceMessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val border0.device.v1.Device.ServerToDeviceMessageOrBuilder.authChallengeOrNull: border0.device.v1.Device.AuthChallengeMessage?
  get() = if (hasAuthChallenge()) getAuthChallenge() else null

public val border0.device.v1.Device.ServerToDeviceMessageOrBuilder.heartbeatOrNull: border0.common.v1.Messages.HeartbeatMessage?
  get() = if (hasHeartbeat()) getHeartbeat() else null

public val border0.device.v1.Device.ServerToDeviceMessageOrBuilder.networkStateOrNull: border0.common.v1.Messages.NetworkStateMessage?
  get() = if (hasNetworkState()) getNetworkState() else null

public val border0.device.v1.Device.ServerToDeviceMessageOrBuilder.peerOnlineOrNull: border0.common.v1.Messages.PeerOnlineMessage?
  get() = if (hasPeerOnline()) getPeerOnline() else null

public val border0.device.v1.Device.ServerToDeviceMessageOrBuilder.peerOfflineOrNull: border0.common.v1.Messages.PeerOfflineMessage?
  get() = if (hasPeerOffline()) getPeerOffline() else null

public val border0.device.v1.Device.ServerToDeviceMessageOrBuilder.disconnectOrNull: border0.common.v1.Messages.DisconnectMessage?
  get() = if (hasDisconnect()) getDisconnect() else null

public val border0.device.v1.Device.ServerToDeviceMessageOrBuilder.serviceOrNull: border0.device.v1.Device.Service?
  get() = if (hasService()) getService() else null

public val border0.device.v1.Device.ServerToDeviceMessageOrBuilder.orgDetailsOrNull: border0.device.v1.Device.OrgDetails?
  get() = if (hasOrgDetails()) getOrgDetails() else null

