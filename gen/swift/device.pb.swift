// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: device.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// sets the .proto file syntax version

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// InfoType represents type of information
/// requested by the client device.
enum Border0_Device_V1_InfoType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unknown // = 0
  case orgDetails // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .orgDetails
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .orgDetails: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Border0_Device_V1_InfoType] = [
    .unknown,
    .orgDetails,
  ]

}

/// messages from devices to the server (api)
struct Border0_Device_V1_DeviceToServerMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: Border0_Device_V1_DeviceToServerMessage.OneOf_Message? = nil

  var authChallengeSolution: Border0_Device_V1_AuthChallengeSolutionMessage {
    get {
      if case .authChallengeSolution(let v)? = message {return v}
      return Border0_Device_V1_AuthChallengeSolutionMessage()
    }
    set {message = .authChallengeSolution(newValue)}
  }

  var discoveryDetails: Border0_Common_V1_DiscoveryDetailsMessage {
    get {
      if case .discoveryDetails(let v)? = message {return v}
      return Border0_Common_V1_DiscoveryDetailsMessage()
    }
    set {message = .discoveryDetails(newValue)}
  }

  var heartbeat: Border0_Common_V1_HeartbeatMessage {
    get {
      if case .heartbeat(let v)? = message {return v}
      return Border0_Common_V1_HeartbeatMessage()
    }
    set {message = .heartbeat(newValue)}
  }

  var stats: Border0_Common_V1_StatsMessage {
    get {
      if case .stats(let v)? = message {return v}
      return Border0_Common_V1_StatsMessage()
    }
    set {message = .stats(newValue)}
  }

  var infoRequest: Border0_Device_V1_InfoRequest {
    get {
      if case .infoRequest(let v)? = message {return v}
      return Border0_Device_V1_InfoRequest()
    }
    set {message = .infoRequest(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Message: Equatable, Sendable {
    case authChallengeSolution(Border0_Device_V1_AuthChallengeSolutionMessage)
    case discoveryDetails(Border0_Common_V1_DiscoveryDetailsMessage)
    case heartbeat(Border0_Common_V1_HeartbeatMessage)
    case stats(Border0_Common_V1_StatsMessage)
    case infoRequest(Border0_Device_V1_InfoRequest)

  }

  init() {}
}

/// messages from the server (api) to devices
struct Border0_Device_V1_ServerToDeviceMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: Border0_Device_V1_ServerToDeviceMessage.OneOf_Message? = nil

  var authChallenge: Border0_Device_V1_AuthChallengeMessage {
    get {
      if case .authChallenge(let v)? = message {return v}
      return Border0_Device_V1_AuthChallengeMessage()
    }
    set {message = .authChallenge(newValue)}
  }

  var heartbeat: Border0_Common_V1_HeartbeatMessage {
    get {
      if case .heartbeat(let v)? = message {return v}
      return Border0_Common_V1_HeartbeatMessage()
    }
    set {message = .heartbeat(newValue)}
  }

  var networkState: Border0_Common_V1_NetworkStateMessage {
    get {
      if case .networkState(let v)? = message {return v}
      return Border0_Common_V1_NetworkStateMessage()
    }
    set {message = .networkState(newValue)}
  }

  var peerOnline: Border0_Common_V1_PeerOnlineMessage {
    get {
      if case .peerOnline(let v)? = message {return v}
      return Border0_Common_V1_PeerOnlineMessage()
    }
    set {message = .peerOnline(newValue)}
  }

  var peerOffline: Border0_Common_V1_PeerOfflineMessage {
    get {
      if case .peerOffline(let v)? = message {return v}
      return Border0_Common_V1_PeerOfflineMessage()
    }
    set {message = .peerOffline(newValue)}
  }

  var disconnect: Border0_Common_V1_DisconnectMessage {
    get {
      if case .disconnect(let v)? = message {return v}
      return Border0_Common_V1_DisconnectMessage()
    }
    set {message = .disconnect(newValue)}
  }

  var service: Border0_Device_V1_Service {
    get {
      if case .service(let v)? = message {return v}
      return Border0_Device_V1_Service()
    }
    set {message = .service(newValue)}
  }

  var orgDetails: Border0_Device_V1_OrgDetails {
    get {
      if case .orgDetails(let v)? = message {return v}
      return Border0_Device_V1_OrgDetails()
    }
    set {message = .orgDetails(newValue)}
  }

  var serviceBatch: Border0_Device_V1_ServiceBatch {
    get {
      if case .serviceBatch(let v)? = message {return v}
      return Border0_Device_V1_ServiceBatch()
    }
    set {message = .serviceBatch(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Message: Equatable, Sendable {
    case authChallenge(Border0_Device_V1_AuthChallengeMessage)
    case heartbeat(Border0_Common_V1_HeartbeatMessage)
    case networkState(Border0_Common_V1_NetworkStateMessage)
    case peerOnline(Border0_Common_V1_PeerOnlineMessage)
    case peerOffline(Border0_Common_V1_PeerOfflineMessage)
    case disconnect(Border0_Common_V1_DisconnectMessage)
    case service(Border0_Device_V1_Service)
    case orgDetails(Border0_Device_V1_OrgDetails)
    case serviceBatch(Border0_Device_V1_ServiceBatch)

  }

  init() {}
}

struct Border0_Device_V1_AuthChallengeMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var serverPublicKey: String = String()

  var challenge: Data = Data()

  var challengeNonce: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_Device_V1_AuthChallengeSolutionMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var solved: Data = Data()

  var solvedNonce: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_Device_V1_Service: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var networkID: String {
    get {return _storage._networkID}
    set {_uniqueStorage()._networkID = newValue}
  }

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var ipv4: String {
    get {return _storage._ipv4}
    set {_uniqueStorage()._ipv4 = newValue}
  }

  var ipv6: String {
    get {return _storage._ipv6}
    set {_uniqueStorage()._ipv6 = newValue}
  }

  var subnetRoutes: [String] {
    get {return _storage._subnetRoutes}
    set {_uniqueStorage()._subnetRoutes = newValue}
  }

  var peerPublicKey: [String] {
    get {return _storage._peerPublicKey}
    set {_uniqueStorage()._peerPublicKey = newValue}
  }

  var dnsName: String {
    get {return _storage._dnsName}
    set {_uniqueStorage()._dnsName = newValue}
  }

  var upstreamType: String {
    get {return _storage._upstreamType}
    set {_uniqueStorage()._upstreamType = newValue}
  }

  var upstreamPort: UInt32 {
    get {return _storage._upstreamPort}
    set {_uniqueStorage()._upstreamPort = newValue}
  }

  var hasUpstreamUsername_p: Bool {
    get {return _storage._hasUpstreamUsername_p}
    set {_uniqueStorage()._hasUpstreamUsername_p = newValue}
  }

  var upstreamSshType: String {
    get {return _storage._upstreamSshType}
    set {_uniqueStorage()._upstreamSshType = newValue}
  }

  var tags: Dictionary<String,String> {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  var publicIps: [Border0_Common_V1_IPAddressWithMetadata] {
    get {return _storage._publicIps}
    set {_uniqueStorage()._publicIps = newValue}
  }

  var standalone: Bool {
    get {return _storage._standalone}
    set {_uniqueStorage()._standalone = newValue}
  }

  var delete: Bool {
    get {return _storage._delete}
    set {_uniqueStorage()._delete = newValue}
  }

  var displayName: String {
    get {return _storage._displayName}
    set {_uniqueStorage()._displayName = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Border0_Device_V1_ServiceBatch: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var services: [Border0_Device_V1_Service] = []

  var totalServices: Int32 = 0

  var batchNumber: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// InfoRequest is a generic request for information where
/// the response from the GRPC server will be a message in
/// accordance to the value of the info_type field.
struct Border0_Device_V1_InfoRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: String = String()

  var infoType: Border0_Device_V1_InfoType = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// OrgDetails is returned upon the client device requesting
/// this data via an InfoRequest with info_type ORG_DETAILS.
struct Border0_Device_V1_OrgDetails: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: String = String()

  var name: String = String()

  var uuid: String = String()

  var caCertPem: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "border0.device.v1"

extension Border0_Device_V1_InfoType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0UNKNOWN\0\u{1}ORG_DETAILS\0")
}

extension Border0_Device_V1_DeviceToServerMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceToServerMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}auth_challenge_solution\0\u{3}discovery_details\0\u{1}heartbeat\0\u{1}stats\0\u{3}info_request\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Border0_Device_V1_AuthChallengeSolutionMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .authChallengeSolution(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .authChallengeSolution(v)
        }
      }()
      case 2: try {
        var v: Border0_Common_V1_DiscoveryDetailsMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .discoveryDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .discoveryDetails(v)
        }
      }()
      case 3: try {
        var v: Border0_Common_V1_HeartbeatMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .heartbeat(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .heartbeat(v)
        }
      }()
      case 4: try {
        var v: Border0_Common_V1_StatsMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .stats(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .stats(v)
        }
      }()
      case 5: try {
        var v: Border0_Device_V1_InfoRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .infoRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .infoRequest(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .authChallengeSolution?: try {
      guard case .authChallengeSolution(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .discoveryDetails?: try {
      guard case .discoveryDetails(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .heartbeat?: try {
      guard case .heartbeat(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .stats?: try {
      guard case .stats(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .infoRequest?: try {
      guard case .infoRequest(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_Device_V1_DeviceToServerMessage, rhs: Border0_Device_V1_DeviceToServerMessage) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_Device_V1_ServerToDeviceMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServerToDeviceMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}auth_challenge\0\u{1}heartbeat\0\u{3}network_state\0\u{3}peer_online\0\u{3}peer_offline\0\u{1}disconnect\0\u{1}service\0\u{3}org_details\0\u{3}service_batch\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Border0_Device_V1_AuthChallengeMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .authChallenge(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .authChallenge(v)
        }
      }()
      case 2: try {
        var v: Border0_Common_V1_HeartbeatMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .heartbeat(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .heartbeat(v)
        }
      }()
      case 3: try {
        var v: Border0_Common_V1_NetworkStateMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .networkState(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .networkState(v)
        }
      }()
      case 4: try {
        var v: Border0_Common_V1_PeerOnlineMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .peerOnline(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .peerOnline(v)
        }
      }()
      case 5: try {
        var v: Border0_Common_V1_PeerOfflineMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .peerOffline(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .peerOffline(v)
        }
      }()
      case 6: try {
        var v: Border0_Common_V1_DisconnectMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .disconnect(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .disconnect(v)
        }
      }()
      case 7: try {
        var v: Border0_Device_V1_Service?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .service(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .service(v)
        }
      }()
      case 8: try {
        var v: Border0_Device_V1_OrgDetails?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .orgDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .orgDetails(v)
        }
      }()
      case 9: try {
        var v: Border0_Device_V1_ServiceBatch?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .serviceBatch(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .serviceBatch(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .authChallenge?: try {
      guard case .authChallenge(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .heartbeat?: try {
      guard case .heartbeat(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .networkState?: try {
      guard case .networkState(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .peerOnline?: try {
      guard case .peerOnline(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .peerOffline?: try {
      guard case .peerOffline(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .disconnect?: try {
      guard case .disconnect(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .service?: try {
      guard case .service(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .orgDetails?: try {
      guard case .orgDetails(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .serviceBatch?: try {
      guard case .serviceBatch(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_Device_V1_ServerToDeviceMessage, rhs: Border0_Device_V1_ServerToDeviceMessage) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_Device_V1_AuthChallengeMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthChallengeMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}serverPublicKey\0\u{1}challenge\0\u{1}challengeNonce\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.serverPublicKey) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.challenge) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.challengeNonce) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serverPublicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.serverPublicKey, fieldNumber: 1)
    }
    if !self.challenge.isEmpty {
      try visitor.visitSingularBytesField(value: self.challenge, fieldNumber: 2)
    }
    if !self.challengeNonce.isEmpty {
      try visitor.visitSingularBytesField(value: self.challengeNonce, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_Device_V1_AuthChallengeMessage, rhs: Border0_Device_V1_AuthChallengeMessage) -> Bool {
    if lhs.serverPublicKey != rhs.serverPublicKey {return false}
    if lhs.challenge != rhs.challenge {return false}
    if lhs.challengeNonce != rhs.challengeNonce {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_Device_V1_AuthChallengeSolutionMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthChallengeSolutionMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}solved\0\u{1}solvedNonce\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.solved) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.solvedNonce) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.solved.isEmpty {
      try visitor.visitSingularBytesField(value: self.solved, fieldNumber: 1)
    }
    if !self.solvedNonce.isEmpty {
      try visitor.visitSingularBytesField(value: self.solvedNonce, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_Device_V1_AuthChallengeSolutionMessage, rhs: Border0_Device_V1_AuthChallengeSolutionMessage) -> Bool {
    if lhs.solved != rhs.solved {return false}
    if lhs.solvedNonce != rhs.solvedNonce {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_Device_V1_Service: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Service"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}network_id\0\u{1}name\0\u{1}type\0\u{1}ipv4\0\u{1}ipv6\0\u{3}subnet_routes\0\u{3}peer_public_key\0\u{3}dns_name\0\u{3}upstream_type\0\u{3}upstream_port\0\u{3}has_upstream_username\0\u{3}upstream_ssh_type\0\u{1}tags\0\u{3}public_ips\0\u{1}standalone\0\u{1}delete\0\u{3}display_name\0")

  fileprivate class _StorageClass {
    var _networkID: String = String()
    var _name: String = String()
    var _type: String = String()
    var _ipv4: String = String()
    var _ipv6: String = String()
    var _subnetRoutes: [String] = []
    var _peerPublicKey: [String] = []
    var _dnsName: String = String()
    var _upstreamType: String = String()
    var _upstreamPort: UInt32 = 0
    var _hasUpstreamUsername_p: Bool = false
    var _upstreamSshType: String = String()
    var _tags: Dictionary<String,String> = [:]
    var _publicIps: [Border0_Common_V1_IPAddressWithMetadata] = []
    var _standalone: Bool = false
    var _delete: Bool = false
    var _displayName: String = String()

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _networkID = source._networkID
      _name = source._name
      _type = source._type
      _ipv4 = source._ipv4
      _ipv6 = source._ipv6
      _subnetRoutes = source._subnetRoutes
      _peerPublicKey = source._peerPublicKey
      _dnsName = source._dnsName
      _upstreamType = source._upstreamType
      _upstreamPort = source._upstreamPort
      _hasUpstreamUsername_p = source._hasUpstreamUsername_p
      _upstreamSshType = source._upstreamSshType
      _tags = source._tags
      _publicIps = source._publicIps
      _standalone = source._standalone
      _delete = source._delete
      _displayName = source._displayName
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._networkID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._type) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._ipv4) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._ipv6) }()
        case 6: try { try decoder.decodeRepeatedStringField(value: &_storage._subnetRoutes) }()
        case 7: try { try decoder.decodeRepeatedStringField(value: &_storage._peerPublicKey) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._dnsName) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._upstreamType) }()
        case 10: try { try decoder.decodeSingularUInt32Field(value: &_storage._upstreamPort) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._hasUpstreamUsername_p) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._upstreamSshType) }()
        case 13: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._tags) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._publicIps) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._standalone) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._delete) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._displayName) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._networkID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._networkID, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 3)
      }
      if !_storage._ipv4.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ipv4, fieldNumber: 4)
      }
      if !_storage._ipv6.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ipv6, fieldNumber: 5)
      }
      if !_storage._subnetRoutes.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._subnetRoutes, fieldNumber: 6)
      }
      if !_storage._peerPublicKey.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._peerPublicKey, fieldNumber: 7)
      }
      if !_storage._dnsName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._dnsName, fieldNumber: 8)
      }
      if !_storage._upstreamType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._upstreamType, fieldNumber: 9)
      }
      if _storage._upstreamPort != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._upstreamPort, fieldNumber: 10)
      }
      if _storage._hasUpstreamUsername_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasUpstreamUsername_p, fieldNumber: 11)
      }
      if !_storage._upstreamSshType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._upstreamSshType, fieldNumber: 12)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._tags, fieldNumber: 13)
      }
      if !_storage._publicIps.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._publicIps, fieldNumber: 14)
      }
      if _storage._standalone != false {
        try visitor.visitSingularBoolField(value: _storage._standalone, fieldNumber: 15)
      }
      if _storage._delete != false {
        try visitor.visitSingularBoolField(value: _storage._delete, fieldNumber: 16)
      }
      if !_storage._displayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayName, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_Device_V1_Service, rhs: Border0_Device_V1_Service) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._networkID != rhs_storage._networkID {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._ipv4 != rhs_storage._ipv4 {return false}
        if _storage._ipv6 != rhs_storage._ipv6 {return false}
        if _storage._subnetRoutes != rhs_storage._subnetRoutes {return false}
        if _storage._peerPublicKey != rhs_storage._peerPublicKey {return false}
        if _storage._dnsName != rhs_storage._dnsName {return false}
        if _storage._upstreamType != rhs_storage._upstreamType {return false}
        if _storage._upstreamPort != rhs_storage._upstreamPort {return false}
        if _storage._hasUpstreamUsername_p != rhs_storage._hasUpstreamUsername_p {return false}
        if _storage._upstreamSshType != rhs_storage._upstreamSshType {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._publicIps != rhs_storage._publicIps {return false}
        if _storage._standalone != rhs_storage._standalone {return false}
        if _storage._delete != rhs_storage._delete {return false}
        if _storage._displayName != rhs_storage._displayName {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_Device_V1_ServiceBatch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServiceBatch"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}services\0\u{3}total_services\0\u{3}batch_number\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.services) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.totalServices) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.batchNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.services.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.services, fieldNumber: 1)
    }
    if self.totalServices != 0 {
      try visitor.visitSingularInt32Field(value: self.totalServices, fieldNumber: 2)
    }
    if self.batchNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.batchNumber, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_Device_V1_ServiceBatch, rhs: Border0_Device_V1_ServiceBatch) -> Bool {
    if lhs.services != rhs.services {return false}
    if lhs.totalServices != rhs.totalServices {return false}
    if lhs.batchNumber != rhs.batchNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_Device_V1_InfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InfoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}request_id\0\u{3}info_type\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.infoType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if self.infoType != .unknown {
      try visitor.visitSingularEnumField(value: self.infoType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_Device_V1_InfoRequest, rhs: Border0_Device_V1_InfoRequest) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.infoType != rhs.infoType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_Device_V1_OrgDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OrgDetails"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}request_id\0\u{1}name\0\u{1}uuid\0\u{3}ca_cert_pem\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.uuid) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.caCertPem) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 3)
    }
    if !self.caCertPem.isEmpty {
      try visitor.visitSingularStringField(value: self.caCertPem, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_Device_V1_OrgDetails, rhs: Border0_Device_V1_OrgDetails) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.uuid != rhs.uuid {return false}
    if lhs.caCertPem != rhs.caCertPem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
