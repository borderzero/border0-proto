// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: connector.proto

package connector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConnectorService_ControlStream_FullMethodName = "/border0.v1.ConnectorService/ControlStream"
)

// ConnectorServiceClient is the client API for ConnectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorServiceClient interface {
	ControlStream(ctx context.Context, opts ...grpc.CallOption) (ConnectorService_ControlStreamClient, error)
}

type connectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorServiceClient(cc grpc.ClientConnInterface) ConnectorServiceClient {
	return &connectorServiceClient{cc}
}

func (c *connectorServiceClient) ControlStream(ctx context.Context, opts ...grpc.CallOption) (ConnectorService_ControlStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConnectorService_ServiceDesc.Streams[0], ConnectorService_ControlStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &connectorServiceControlStreamClient{stream}
	return x, nil
}

type ConnectorService_ControlStreamClient interface {
	Send(*ControlStreamRequest) error
	Recv() (*ControlStreamReponse, error)
	grpc.ClientStream
}

type connectorServiceControlStreamClient struct {
	grpc.ClientStream
}

func (x *connectorServiceControlStreamClient) Send(m *ControlStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *connectorServiceControlStreamClient) Recv() (*ControlStreamReponse, error) {
	m := new(ControlStreamReponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConnectorServiceServer is the server API for ConnectorService service.
// All implementations must embed UnimplementedConnectorServiceServer
// for forward compatibility
type ConnectorServiceServer interface {
	ControlStream(ConnectorService_ControlStreamServer) error
	mustEmbedUnimplementedConnectorServiceServer()
}

// UnimplementedConnectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConnectorServiceServer struct {
}

func (UnimplementedConnectorServiceServer) ControlStream(ConnectorService_ControlStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ControlStream not implemented")
}
func (UnimplementedConnectorServiceServer) mustEmbedUnimplementedConnectorServiceServer() {}

// UnsafeConnectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorServiceServer will
// result in compilation errors.
type UnsafeConnectorServiceServer interface {
	mustEmbedUnimplementedConnectorServiceServer()
}

func RegisterConnectorServiceServer(s grpc.ServiceRegistrar, srv ConnectorServiceServer) {
	s.RegisterService(&ConnectorService_ServiceDesc, srv)
}

func _ConnectorService_ControlStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConnectorServiceServer).ControlStream(&connectorServiceControlStreamServer{stream})
}

type ConnectorService_ControlStreamServer interface {
	Send(*ControlStreamReponse) error
	Recv() (*ControlStreamRequest, error)
	grpc.ServerStream
}

type connectorServiceControlStreamServer struct {
	grpc.ServerStream
}

func (x *connectorServiceControlStreamServer) Send(m *ControlStreamReponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *connectorServiceControlStreamServer) Recv() (*ControlStreamRequest, error) {
	m := new(ControlStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConnectorService_ServiceDesc is the grpc.ServiceDesc for ConnectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "border0.v1.ConnectorService",
	HandlerType: (*ConnectorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ControlStream",
			Handler:       _ConnectorService_ControlStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "connector.proto",
}

const (
	StreamBridgeService_Stream_FullMethodName = "/border0.v1.StreamBridgeService/Stream"
)

// StreamBridgeServiceClient is the client API for StreamBridgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamBridgeServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (StreamBridgeService_StreamClient, error)
}

type streamBridgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamBridgeServiceClient(cc grpc.ClientConnInterface) StreamBridgeServiceClient {
	return &streamBridgeServiceClient{cc}
}

func (c *streamBridgeServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (StreamBridgeService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamBridgeService_ServiceDesc.Streams[0], StreamBridgeService_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamBridgeServiceStreamClient{stream}
	return x, nil
}

type StreamBridgeService_StreamClient interface {
	Send(*StreamChunck) error
	CloseAndRecv() (*StreamStatus, error)
	grpc.ClientStream
}

type streamBridgeServiceStreamClient struct {
	grpc.ClientStream
}

func (x *streamBridgeServiceStreamClient) Send(m *StreamChunck) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamBridgeServiceStreamClient) CloseAndRecv() (*StreamStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamBridgeServiceServer is the server API for StreamBridgeService service.
// All implementations must embed UnimplementedStreamBridgeServiceServer
// for forward compatibility
type StreamBridgeServiceServer interface {
	Stream(StreamBridgeService_StreamServer) error
	mustEmbedUnimplementedStreamBridgeServiceServer()
}

// UnimplementedStreamBridgeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamBridgeServiceServer struct {
}

func (UnimplementedStreamBridgeServiceServer) Stream(StreamBridgeService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedStreamBridgeServiceServer) mustEmbedUnimplementedStreamBridgeServiceServer() {}

// UnsafeStreamBridgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamBridgeServiceServer will
// result in compilation errors.
type UnsafeStreamBridgeServiceServer interface {
	mustEmbedUnimplementedStreamBridgeServiceServer()
}

func RegisterStreamBridgeServiceServer(s grpc.ServiceRegistrar, srv StreamBridgeServiceServer) {
	s.RegisterService(&StreamBridgeService_ServiceDesc, srv)
}

func _StreamBridgeService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamBridgeServiceServer).Stream(&streamBridgeServiceStreamServer{stream})
}

type StreamBridgeService_StreamServer interface {
	SendAndClose(*StreamStatus) error
	Recv() (*StreamChunck, error)
	grpc.ServerStream
}

type streamBridgeServiceStreamServer struct {
	grpc.ServerStream
}

func (x *streamBridgeServiceStreamServer) SendAndClose(m *StreamStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamBridgeServiceStreamServer) Recv() (*StreamChunck, error) {
	m := new(StreamChunck)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamBridgeService_ServiceDesc is the grpc.ServiceDesc for StreamBridgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamBridgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "border0.v1.StreamBridgeService",
	HandlerType: (*StreamBridgeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _StreamBridgeService_Stream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "connector.proto",
}
