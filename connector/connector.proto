syntax = "proto3";

option go_package = "github.com/borderzero/border0-proto/connector";
package border0.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

service ConnectorService {
  rpc ControlStream(stream ControlStreamRequest) returns (stream ControlStreamReponse);
}

message ControlStreamRequest {
  oneof RequestType {
    Config config = 1;
    HeartbeatRequest heartbeat = 2;
    PluginDiscoveryResults plugin_discovery_results = 3;
    TunnelCertificateSignRequest tunnel_certificate_sign_request = 5;
    Log log = 6;
    ConnectorMetadata metadata = 7;
    AuthorizeRequest authorize = 8;
    SessionUpdateRequest session_update = 9;
    SshCertifcateSignRequest ssh_certificate_sign_request = 10;
    UploadRecording upload_recording = 11;
    CertifcateSignRequest certifcate_sign_request = 12;
  }
}

message ControlStreamReponse {
  oneof RequestType {
    Init init = 1;
    ConnectorConfig connector_config = 2;
    UpdateConfig update_config = 3;
    HeartbeatResponse heartbeat = 4;
    TunnelCertificateSignResponse tunnel_certificate_sign_response = 5;
    Discover discover = 6;
    Stop stop = 7;
    Disconnect disconnect = 8;
    AuthorizeResponse authorize = 9;
    SshCertifcateSignResponse ssh_certificate_sign_response = 10;
    CertifcateSignResponse certifcate_sign_response = 11;
  }
}

message Organization {
  string id = 1;
  string name = 2;
  string subdomain = 3;
  google.protobuf.Struct certificates = 4;
}

message TunnelCertificateSignRequest {
  string request_id = 1;
  string socket_id = 2;
  string public_key = 3;
}

message TunnelCertificateSignResponse {
  string request_id = 1;
  string certificate = 2;
  string hostkey = 3;
}

message Init {
  ConnectorConfig connector_config = 1;
  repeated SocketConfig sockets = 2;
  repeated PluginConfig plugins = 3;
}

message UpdateConfig {
  Action action = 1;
  oneof ConfigType {
    PluginConfig plugin_config = 2;
    SocketConfig socket_config = 3;
  }
}

message Log {
  string connector_id = 1;
  string socket_id = 2;
  string plugin_id = 3;
  google.protobuf.Timestamp timestamp = 4;
  string severity = 5;
  string message = 6;
}

message ConnectorMetadata {
  google.protobuf.Struct data = 1;
}

enum Action {
    CREATE = 0;
    UPDATE = 1;
    DELETE = 2;
    OTHER = 3;
}

message Config {
  bool connector = 1;
  bool sockets = 2;
  bool plugins = 3;
}

message HeartbeatRequest {}
message HeartbeatResponse {}

message PluginDiscoveryResults {
  string plugin_id = 1;
  string request_id = 2;
  PluginDiscoveryResultsMetadata metadata = 3;
  repeated google.protobuf.Struct resources = 4;
  repeated string errors = 5;
  repeated string warnings = 6;
}

message PluginDiscoveryResultsMetadata {
  string discovery_id = 1;
  google.protobuf.Timestamp started_at = 2;
  google.protobuf.Timestamp ended_at = 3;
}

message Tag {
  string key = 1;
  string value = 2;
}

message SocketConfig {
  string id = 1;
  string name = 2;
  string type = 3;
  google.protobuf.Struct config = 4;
}

message ConnectorConfig {
 string name = 1;
 int32 heartbeat_interval = 2;
 Organization organization = 3;
}

message PluginConfig {
  string id =1;
  string name = 2;
  string type = 3;
  google.protobuf.Struct config = 4;
}

message Discover {
  string id = 1;
  string request_id = 2;
}

message Stop {
  string reason = 1;
}

message Disconnect {
  string reason = 1;
}

message AuthorizeRequest {
  string request_id = 1;
  string protocol = 2;
  string user_email = 3;
  string ip_address = 4;
  string session_key = 5;
  string socket_id = 6;
}

message actionList {
  repeated string values = 1;
}

message extendedActionList {
  repeated ExtendedAction values = 1;
}

message infoList {
  repeated string values = 1;
}

message AuthorizeResponse {
  string request_id = 1;
  map<string, actionList> allowed_actions = 2;
  map<string, infoList> info = 3;
  map<string, extendedActionList> allowed_extended_actions = 4;
}

message SessionUpdateRequest {
  string session_key = 1;
  string socket_id = 2;
  string user_data = 3;
}

message SshCertifcateSignRequest {
  string request_id = 1;
  string socket_id = 2;
  string session_key = 3;
  string user_email = 4;
  bytes public_key = 5;
  bytes ticket = 6;
}

message SshCertifcateSignResponse {
  string request_id = 1;
  bytes certificate = 2;
}

message UploadRecording {
  string session_key = 1;
  string recording_id = 2;
  bytes recording = 3;
}

message CertifcateSignRequest {
  string request_id = 1;
  bytes certificate_signing_request = 2;
}

message CertifcateSignResponse {
  string request_id = 1;
  bytes certificate = 2;
}

message DatabaseActions {
  repeated DatabaseSchemaAction schemas = 1;
  bool read_only = 2;
  repeated string allowed_query_types = 3;
  int32 max_session_duration_seconds = 4;
}

message DatabaseSchemaAction {
  string schema = 1;
  repeated string allowed_query_types = 2;
  bool read_only = 3;
}

message SSHActions {
  SSHShellAction shell = 1;
  SSHExecAction exec = 2;
  SSHTcpForwardingAction tcp_forwarding = 3;
  SSHSFTPAction sftp = 4;
  SSHKubectlExecAction kubectl_exec = 5;
  SSHDockerExecAction docker_exec = 6;
  int32 max_session_duration_seconds = 7;
  repeated string allowed_usernames = 8;
}

message SSHShellAction {
  bool enabled = 1;
}

message SSHExecAction {
  bool enabled = 1;
  repeated string commands = 2;
}

message SSHTcpForwardingAction {
  bool enabled = 1;
  repeated SSHTcpForwardingConnection allowed_connections = 2;
}

message SSHTcpForwardingConnection {
  string destination_address = 1;
  int32 destination_port = 2;
}

message SSHSFTPAction {
  bool enabled = 1;
}

message SSHKubectlExecAction {
  bool enabled = 1;
  repeated KubectlExecNamespace allowed_namespaces = 2;
  map<string, string> pod_selector = 3;
}

message KubectlExecNamespace {
  string namespace = 1;
  map<string, string> pod_selector = 2;
}

message SSHDockerExecAction {
  bool enabled = 1;
  repeated string allowed_containers = 2;
}

message ExtendedAction {
  DatabaseActions database = 1;
  SSHActions ssh = 2;
  DockerActions docker = 3;
}

message DockerAllowedActions {
  string container = 1;
  repeated string allowed_actions = 2;
}

message DockerContainerAction {
  bool allow_list = 1;
  bool allow_create = 2;
  repeated DockerAllowedActions allowed_actions = 3;
}

message DockerActions {
  DockerContainerAction containers = 1;
  int32 max_session_duration_seconds = 2;
}
