// sets the .proto file syntax version
syntax = "proto3";

// sets the output golang package name
option go_package = "github.com/borderzero/border0-proto/connector";

// sets the protobuf package name (i.e. definitions namespace)
package border0.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "common/messages.proto";

service ConnectorService {
  rpc ControlStream(stream ControlStreamRequest) returns (stream ControlStreamResponse);
}

message ControlStreamRequest {
  oneof RequestType {
    Config config = 1;
    border0.common.v1.HeartbeatMessage heartbeat = 2;
    PluginDiscoveryResults plugin_discovery_results = 3;
    TunnelCertificateSignRequest tunnel_certificate_sign_request = 5;
    Log log = 6;
    ConnectorMetadata metadata = 7;
    AuthorizeRequest authorize = 8;
    SessionUpdateRequest session_update = 9;
    SshCertificateSignRequest ssh_certificate_sign_request = 10;
    UploadRecording upload_recording = 11;
    CertificateSignRequest Certificate_sign_request = 12;
    SessionEvent session_event = 13;
    border0.common.v1.DiscoveryDetailsMessage discovery_details = 14;
    AuthorizePeerRequest authorize_peer = 15;
    SessionRequest session = 16;
  }
}

message ControlStreamResponse {
  oneof RequestType {
    Init init = 1;
    ConnectorConfig connector_config = 2;
    UpdateConfig update_config = 3;
    border0.common.v1.HeartbeatMessage heartbeat = 4;
    TunnelCertificateSignResponse tunnel_certificate_sign_response = 5;
    Discover discover = 6;
    Stop stop = 7;
    Disconnect disconnect = 8;
    AuthorizeResponse authorize = 9;
    SshCertificateSignResponse ssh_certificate_sign_response = 10;
    CertificateSignResponse Certificate_sign_response = 11;
    border0.common.v1.NetworkStateMessage network_state = 12;
    border0.common.v1.PeerOnlineMessage peer_online = 13;
    border0.common.v1.PeerOfflineMessage peer_offline = 14;
    AuthorizePeerResponse authorize_peer = 15;
    SessionResponse session = 16;
  }
}
  
message Organization {
  string id = 1;
  string name = 2;
  string subdomain = 3;
  google.protobuf.Struct certificates = 4;
}

message TunnelCertificateSignRequest {
  string request_id = 1;
  string socket_id = 2;
  string public_key = 3;
}

message TunnelCertificateSignResponse {
  string request_id = 1;
  string certificate = 2;
  string hostkey = 3;
}

message Init {
  ConnectorConfig connector_config = 1;
  repeated SocketConfig sockets = 2;
  repeated PluginConfig plugins = 3;
}

message UpdateConfig {
  Action action = 1;
  oneof ConfigType {
    PluginConfig plugin_config = 2;
    SocketConfig socket_config = 3;
  }
}

message Log {
  string connector_id = 1;
  string socket_id = 2;
  string plugin_id = 3;
  google.protobuf.Timestamp timestamp = 4;
  string severity = 5;
  string message = 6;
}

message ConnectorMetadata {
  google.protobuf.Struct data = 1;
}

enum Action {
    CREATE = 0;
    UPDATE = 1;
    DELETE = 2;
    OTHER = 3;
}

message Config {
  bool connector = 1;
  bool sockets = 2;
  bool plugins = 3;
}

message PluginDiscoveryResults {
  string plugin_id = 1;
  string request_id = 2;
  PluginDiscoveryResultsMetadata metadata = 3;
  repeated google.protobuf.Struct resources = 4;
  repeated string errors = 5;
  repeated string warnings = 6;
}

message PluginDiscoveryResultsMetadata {
  string discovery_id = 1;
  google.protobuf.Timestamp started_at = 2;
  google.protobuf.Timestamp ended_at = 3;
}

message Tag {
  string key = 1;
  string value = 2;
}

message SocketConfig {
  string id = 1;
  string name = 2;
  string type = 3;
  google.protobuf.Struct config = 4;
}

message ConnectorConfig {
 string name = 1;
 int32 heartbeat_interval = 2;
 Organization organization = 3;
 bool private_network_enabled = 4;
}

message PluginConfig {
  string id =1;
  string name = 2;
  string type = 3;
  google.protobuf.Struct config = 4;
}

message Discover {
  string id = 1;
  string request_id = 2;
}

message Stop {
  string reason = 1;
}

message Disconnect {
  string reason = 1;
}

message AuthorizeRequest {
  string request_id = 1;
  string protocol = 2;
  string user_email = 3;
  string ip_address = 4;
  string session_key = 5;
  string socket_id = 6;
}


message AuthorizePeerRequest {
  string request_id = 1;
  string protocol = 2;
  string public_key = 3;
  string ip_address = 4;
  string socket_id = 5;
}

message actionList {
  repeated string values = 1;
}

message Permissions {
  repeated google.protobuf.Struct permissions = 1;
}

message infoList {
  repeated string values = 1;
}

message AuthorizeResponse {
  string request_id = 1;
  map<string, actionList> allowed_actions = 2;
  map<string, infoList> info = 3;
  map<string, Permissions> permissions = 5;
}

message AuthorizePeerResponse {
  string request_id = 1;
  map<string, actionList> allowed_actions = 2;
  map<string, infoList> info = 3;
  map<string, Permissions> permissions = 5;
  string email = 6;
}

message SessionUpdateRequest {
  string session_key = 1;
  string socket_id = 2;
  string user_data = 3;
  string result = 4;
  string auth_info_failed = 5;
}

message SessionRequest {
  string request_id = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
  google.protobuf.Timestamp last_seen = 4;
  string email = 5;
  string log_type = 6;
  string socket_id = 7;
  string server_name = 8;
  string server_port = 9;
  string client_ip = 10;
  string client_port = 11;
  string session_data = 12;
  string session_key = 13;
  string result = 14;
  string auth_info = 15;
}

message SessionResponse {
  string request_id = 1;
  string session_id = 2;
  bytes ssh_ticket = 3;
}

message SessionEvent {
  string session_key = 1;
  string socket_id = 2;
  string type = 3;
  string status = 4;
  string metadata = 5;
}

message SshCertificateSignRequest {
  string request_id = 1;
  string socket_id = 2;
  string session_key = 3;
  string user_email = 4;
  bytes public_key = 5;
  bytes ticket = 6;
}

message SshCertificateSignResponse {
  string request_id = 1;
  bytes certificate = 2;
}

message UploadRecording {
  string session_key = 1;    // session identifier (unique globally)
  string recording_id = 2;   // recording identifier (unique per-session)
  bytes recording = 3;       // actual recording bytes
  string recording_type = 4; // type of the recording e.g. asciinema, log, etc...
}

message CertificateSignRequest {
  string request_id = 1;
  bytes certificate_signing_request = 2;
}

message CertificateSignResponse {
  string request_id = 1;
  bytes certificate = 2;
}