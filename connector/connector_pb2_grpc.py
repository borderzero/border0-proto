# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import connector_pb2 as connector__pb2


class ConnectorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ControlStream = channel.stream_stream(
                '/border0.v1.ConnectorService/ControlStream',
                request_serializer=connector__pb2.ControlStreamRequest.SerializeToString,
                response_deserializer=connector__pb2.ControlStreamReponse.FromString,
                )


class ConnectorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ControlStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ControlStream': grpc.stream_stream_rpc_method_handler(
                    servicer.ControlStream,
                    request_deserializer=connector__pb2.ControlStreamRequest.FromString,
                    response_serializer=connector__pb2.ControlStreamReponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'border0.v1.ConnectorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConnectorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ControlStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/border0.v1.ConnectorService/ControlStream',
            connector__pb2.ControlStreamRequest.SerializeToString,
            connector__pb2.ControlStreamReponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class StreamBridgeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Stream = channel.stream_unary(
                '/border0.v1.StreamBridgeService/Stream',
                request_serializer=connector__pb2.StreamChunck.SerializeToString,
                response_deserializer=connector__pb2.StreamStatus.FromString,
                )
        self.UserStream = channel.unary_stream(
                '/border0.v1.StreamBridgeService/UserStream',
                request_serializer=connector__pb2.UserStreamRequest.SerializeToString,
                response_deserializer=connector__pb2.StreamChunck.FromString,
                )


class StreamBridgeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Stream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamBridgeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Stream': grpc.stream_unary_rpc_method_handler(
                    servicer.Stream,
                    request_deserializer=connector__pb2.StreamChunck.FromString,
                    response_serializer=connector__pb2.StreamStatus.SerializeToString,
            ),
            'UserStream': grpc.unary_stream_rpc_method_handler(
                    servicer.UserStream,
                    request_deserializer=connector__pb2.UserStreamRequest.FromString,
                    response_serializer=connector__pb2.StreamChunck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'border0.v1.StreamBridgeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StreamBridgeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/border0.v1.StreamBridgeService/Stream',
            connector__pb2.StreamChunck.SerializeToString,
            connector__pb2.StreamStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/border0.v1.StreamBridgeService/UserStream',
            connector__pb2.UserStreamRequest.SerializeToString,
            connector__pb2.StreamChunck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
