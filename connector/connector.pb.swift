// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: connector.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// sets the .proto file syntax version

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Border0_V1_Action: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case create // = 0
  case update // = 1
  case delete // = 2
  case other // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .create
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .create
    case 1: self = .update
    case 2: self = .delete
    case 3: self = .other
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .create: return 0
    case .update: return 1
    case .delete: return 2
    case .other: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Border0_V1_Action] = [
    .create,
    .update,
    .delete,
    .other,
  ]

}

struct Border0_V1_ControlStreamRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestType: Border0_V1_ControlStreamRequest.OneOf_RequestType? = nil

  var config: Border0_V1_Config {
    get {
      if case .config(let v)? = requestType {return v}
      return Border0_V1_Config()
    }
    set {requestType = .config(newValue)}
  }

  var heartbeat: Border0_Common_V1_HeartbeatMessage {
    get {
      if case .heartbeat(let v)? = requestType {return v}
      return Border0_Common_V1_HeartbeatMessage()
    }
    set {requestType = .heartbeat(newValue)}
  }

  var pluginDiscoveryResults: Border0_V1_PluginDiscoveryResults {
    get {
      if case .pluginDiscoveryResults(let v)? = requestType {return v}
      return Border0_V1_PluginDiscoveryResults()
    }
    set {requestType = .pluginDiscoveryResults(newValue)}
  }

  var tunnelCertificateSignRequest: Border0_V1_TunnelCertificateSignRequest {
    get {
      if case .tunnelCertificateSignRequest(let v)? = requestType {return v}
      return Border0_V1_TunnelCertificateSignRequest()
    }
    set {requestType = .tunnelCertificateSignRequest(newValue)}
  }

  var log: Border0_V1_Log {
    get {
      if case .log(let v)? = requestType {return v}
      return Border0_V1_Log()
    }
    set {requestType = .log(newValue)}
  }

  var metadata: Border0_V1_ConnectorMetadata {
    get {
      if case .metadata(let v)? = requestType {return v}
      return Border0_V1_ConnectorMetadata()
    }
    set {requestType = .metadata(newValue)}
  }

  var authorize: Border0_V1_AuthorizeRequest {
    get {
      if case .authorize(let v)? = requestType {return v}
      return Border0_V1_AuthorizeRequest()
    }
    set {requestType = .authorize(newValue)}
  }

  var sessionUpdate: Border0_V1_SessionUpdateRequest {
    get {
      if case .sessionUpdate(let v)? = requestType {return v}
      return Border0_V1_SessionUpdateRequest()
    }
    set {requestType = .sessionUpdate(newValue)}
  }

  var sshCertificateSignRequest: Border0_V1_SshCertificateSignRequest {
    get {
      if case .sshCertificateSignRequest(let v)? = requestType {return v}
      return Border0_V1_SshCertificateSignRequest()
    }
    set {requestType = .sshCertificateSignRequest(newValue)}
  }

  var uploadRecording: Border0_V1_UploadRecording {
    get {
      if case .uploadRecording(let v)? = requestType {return v}
      return Border0_V1_UploadRecording()
    }
    set {requestType = .uploadRecording(newValue)}
  }

  var certificateSignRequest: Border0_V1_CertificateSignRequest {
    get {
      if case .certificateSignRequest(let v)? = requestType {return v}
      return Border0_V1_CertificateSignRequest()
    }
    set {requestType = .certificateSignRequest(newValue)}
  }

  var sessionEvent: Border0_V1_SessionEvent {
    get {
      if case .sessionEvent(let v)? = requestType {return v}
      return Border0_V1_SessionEvent()
    }
    set {requestType = .sessionEvent(newValue)}
  }

  var discoveryDetails: Border0_Common_V1_DiscoveryDetailsMessage {
    get {
      if case .discoveryDetails(let v)? = requestType {return v}
      return Border0_Common_V1_DiscoveryDetailsMessage()
    }
    set {requestType = .discoveryDetails(newValue)}
  }

  var authorizePeer: Border0_V1_AuthorizePeerRequest {
    get {
      if case .authorizePeer(let v)? = requestType {return v}
      return Border0_V1_AuthorizePeerRequest()
    }
    set {requestType = .authorizePeer(newValue)}
  }

  var session: Border0_V1_SessionRequest {
    get {
      if case .session(let v)? = requestType {return v}
      return Border0_V1_SessionRequest()
    }
    set {requestType = .session(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_RequestType: Equatable, Sendable {
    case config(Border0_V1_Config)
    case heartbeat(Border0_Common_V1_HeartbeatMessage)
    case pluginDiscoveryResults(Border0_V1_PluginDiscoveryResults)
    case tunnelCertificateSignRequest(Border0_V1_TunnelCertificateSignRequest)
    case log(Border0_V1_Log)
    case metadata(Border0_V1_ConnectorMetadata)
    case authorize(Border0_V1_AuthorizeRequest)
    case sessionUpdate(Border0_V1_SessionUpdateRequest)
    case sshCertificateSignRequest(Border0_V1_SshCertificateSignRequest)
    case uploadRecording(Border0_V1_UploadRecording)
    case certificateSignRequest(Border0_V1_CertificateSignRequest)
    case sessionEvent(Border0_V1_SessionEvent)
    case discoveryDetails(Border0_Common_V1_DiscoveryDetailsMessage)
    case authorizePeer(Border0_V1_AuthorizePeerRequest)
    case session(Border0_V1_SessionRequest)

  }

  init() {}
}

struct Border0_V1_ControlStreamResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestType: Border0_V1_ControlStreamResponse.OneOf_RequestType? = nil

  var init_p: Border0_V1_Init {
    get {
      if case .init_p(let v)? = requestType {return v}
      return Border0_V1_Init()
    }
    set {requestType = .init_p(newValue)}
  }

  var connectorConfig: Border0_V1_ConnectorConfig {
    get {
      if case .connectorConfig(let v)? = requestType {return v}
      return Border0_V1_ConnectorConfig()
    }
    set {requestType = .connectorConfig(newValue)}
  }

  var updateConfig: Border0_V1_UpdateConfig {
    get {
      if case .updateConfig(let v)? = requestType {return v}
      return Border0_V1_UpdateConfig()
    }
    set {requestType = .updateConfig(newValue)}
  }

  var heartbeat: Border0_Common_V1_HeartbeatMessage {
    get {
      if case .heartbeat(let v)? = requestType {return v}
      return Border0_Common_V1_HeartbeatMessage()
    }
    set {requestType = .heartbeat(newValue)}
  }

  var tunnelCertificateSignResponse: Border0_V1_TunnelCertificateSignResponse {
    get {
      if case .tunnelCertificateSignResponse(let v)? = requestType {return v}
      return Border0_V1_TunnelCertificateSignResponse()
    }
    set {requestType = .tunnelCertificateSignResponse(newValue)}
  }

  var discover: Border0_V1_Discover {
    get {
      if case .discover(let v)? = requestType {return v}
      return Border0_V1_Discover()
    }
    set {requestType = .discover(newValue)}
  }

  var stop: Border0_V1_Stop {
    get {
      if case .stop(let v)? = requestType {return v}
      return Border0_V1_Stop()
    }
    set {requestType = .stop(newValue)}
  }

  var disconnect: Border0_V1_Disconnect {
    get {
      if case .disconnect(let v)? = requestType {return v}
      return Border0_V1_Disconnect()
    }
    set {requestType = .disconnect(newValue)}
  }

  var authorize: Border0_V1_AuthorizeResponse {
    get {
      if case .authorize(let v)? = requestType {return v}
      return Border0_V1_AuthorizeResponse()
    }
    set {requestType = .authorize(newValue)}
  }

  var sshCertificateSignResponse: Border0_V1_SshCertificateSignResponse {
    get {
      if case .sshCertificateSignResponse(let v)? = requestType {return v}
      return Border0_V1_SshCertificateSignResponse()
    }
    set {requestType = .sshCertificateSignResponse(newValue)}
  }

  var certificateSignResponse: Border0_V1_CertificateSignResponse {
    get {
      if case .certificateSignResponse(let v)? = requestType {return v}
      return Border0_V1_CertificateSignResponse()
    }
    set {requestType = .certificateSignResponse(newValue)}
  }

  var networkState: Border0_Common_V1_NetworkStateMessage {
    get {
      if case .networkState(let v)? = requestType {return v}
      return Border0_Common_V1_NetworkStateMessage()
    }
    set {requestType = .networkState(newValue)}
  }

  var peerOnline: Border0_Common_V1_PeerOnlineMessage {
    get {
      if case .peerOnline(let v)? = requestType {return v}
      return Border0_Common_V1_PeerOnlineMessage()
    }
    set {requestType = .peerOnline(newValue)}
  }

  var peerOffline: Border0_Common_V1_PeerOfflineMessage {
    get {
      if case .peerOffline(let v)? = requestType {return v}
      return Border0_Common_V1_PeerOfflineMessage()
    }
    set {requestType = .peerOffline(newValue)}
  }

  var authorizePeer: Border0_V1_AuthorizePeerResponse {
    get {
      if case .authorizePeer(let v)? = requestType {return v}
      return Border0_V1_AuthorizePeerResponse()
    }
    set {requestType = .authorizePeer(newValue)}
  }

  var session: Border0_V1_SessionResponse {
    get {
      if case .session(let v)? = requestType {return v}
      return Border0_V1_SessionResponse()
    }
    set {requestType = .session(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_RequestType: Equatable, Sendable {
    case init_p(Border0_V1_Init)
    case connectorConfig(Border0_V1_ConnectorConfig)
    case updateConfig(Border0_V1_UpdateConfig)
    case heartbeat(Border0_Common_V1_HeartbeatMessage)
    case tunnelCertificateSignResponse(Border0_V1_TunnelCertificateSignResponse)
    case discover(Border0_V1_Discover)
    case stop(Border0_V1_Stop)
    case disconnect(Border0_V1_Disconnect)
    case authorize(Border0_V1_AuthorizeResponse)
    case sshCertificateSignResponse(Border0_V1_SshCertificateSignResponse)
    case certificateSignResponse(Border0_V1_CertificateSignResponse)
    case networkState(Border0_Common_V1_NetworkStateMessage)
    case peerOnline(Border0_Common_V1_PeerOnlineMessage)
    case peerOffline(Border0_Common_V1_PeerOfflineMessage)
    case authorizePeer(Border0_V1_AuthorizePeerResponse)
    case session(Border0_V1_SessionResponse)

  }

  init() {}
}

struct Border0_V1_Organization: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var subdomain: String = String()

  var certificates: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _certificates ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_certificates = newValue}
  }
  /// Returns true if `certificates` has been explicitly set.
  var hasCertificates: Bool {return self._certificates != nil}
  /// Clears the value of `certificates`. Subsequent reads from it will return its default value.
  mutating func clearCertificates() {self._certificates = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _certificates: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

struct Border0_V1_TunnelCertificateSignRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: String = String()

  var socketID: String = String()

  var publicKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_TunnelCertificateSignResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: String = String()

  var certificate: String = String()

  var hostkey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_Init: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var connectorConfig: Border0_V1_ConnectorConfig {
    get {return _connectorConfig ?? Border0_V1_ConnectorConfig()}
    set {_connectorConfig = newValue}
  }
  /// Returns true if `connectorConfig` has been explicitly set.
  var hasConnectorConfig: Bool {return self._connectorConfig != nil}
  /// Clears the value of `connectorConfig`. Subsequent reads from it will return its default value.
  mutating func clearConnectorConfig() {self._connectorConfig = nil}

  var sockets: [Border0_V1_SocketConfig] = []

  var plugins: [Border0_V1_PluginConfig] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _connectorConfig: Border0_V1_ConnectorConfig? = nil
}

struct Border0_V1_UpdateConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var action: Border0_V1_Action = .create

  var configType: Border0_V1_UpdateConfig.OneOf_ConfigType? = nil

  var pluginConfig: Border0_V1_PluginConfig {
    get {
      if case .pluginConfig(let v)? = configType {return v}
      return Border0_V1_PluginConfig()
    }
    set {configType = .pluginConfig(newValue)}
  }

  var socketConfig: Border0_V1_SocketConfig {
    get {
      if case .socketConfig(let v)? = configType {return v}
      return Border0_V1_SocketConfig()
    }
    set {configType = .socketConfig(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ConfigType: Equatable, Sendable {
    case pluginConfig(Border0_V1_PluginConfig)
    case socketConfig(Border0_V1_SocketConfig)

  }

  init() {}
}

struct Border0_V1_Log: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var connectorID: String = String()

  var socketID: String = String()

  var pluginID: String = String()

  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  var severity: String = String()

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Border0_V1_ConnectorMetadata: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _data ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

struct Border0_V1_Config: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var connector: Bool = false

  var sockets: Bool = false

  var plugins: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_PluginDiscoveryResults: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pluginID: String = String()

  var requestID: String = String()

  var metadata: Border0_V1_PluginDiscoveryResultsMetadata {
    get {return _metadata ?? Border0_V1_PluginDiscoveryResultsMetadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {self._metadata = nil}

  var resources: [SwiftProtobuf.Google_Protobuf_Struct] = []

  var errors: [String] = []

  var warnings: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _metadata: Border0_V1_PluginDiscoveryResultsMetadata? = nil
}

struct Border0_V1_PluginDiscoveryResultsMetadata: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var discoveryID: String = String()

  var startedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startedAt = newValue}
  }
  /// Returns true if `startedAt` has been explicitly set.
  var hasStartedAt: Bool {return self._startedAt != nil}
  /// Clears the value of `startedAt`. Subsequent reads from it will return its default value.
  mutating func clearStartedAt() {self._startedAt = nil}

  var endedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endedAt = newValue}
  }
  /// Returns true if `endedAt` has been explicitly set.
  var hasEndedAt: Bool {return self._endedAt != nil}
  /// Clears the value of `endedAt`. Subsequent reads from it will return its default value.
  mutating func clearEndedAt() {self._endedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Border0_V1_Tag: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_SocketConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var type: String = String()

  var config: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _config ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  var hasConfig: Bool {return self._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  mutating func clearConfig() {self._config = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _config: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

struct Border0_V1_ConnectorConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var heartbeatInterval: Int32 = 0

  var organization: Border0_V1_Organization {
    get {return _organization ?? Border0_V1_Organization()}
    set {_organization = newValue}
  }
  /// Returns true if `organization` has been explicitly set.
  var hasOrganization: Bool {return self._organization != nil}
  /// Clears the value of `organization`. Subsequent reads from it will return its default value.
  mutating func clearOrganization() {self._organization = nil}

  var privateNetworkEnabled: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _organization: Border0_V1_Organization? = nil
}

struct Border0_V1_PluginConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var type: String = String()

  var config: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _config ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  var hasConfig: Bool {return self._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  mutating func clearConfig() {self._config = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _config: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

struct Border0_V1_Discover: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var requestID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_Stop: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reason: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_Disconnect: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reason: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_AuthorizeRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: String = String()

  var `protocol`: String = String()

  var userEmail: String = String()

  var ipAddress: String = String()

  var sessionKey: String = String()

  var socketID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_AuthorizePeerRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: String = String()

  var `protocol`: String = String()

  var publicKey: String = String()

  var ipAddress: String = String()

  var socketID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_actionList: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var values: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_Permissions: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var permissions: [SwiftProtobuf.Google_Protobuf_Struct] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_infoList: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var values: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_AuthorizeResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: String = String()

  var allowedActions: Dictionary<String,Border0_V1_actionList> = [:]

  var info: Dictionary<String,Border0_V1_infoList> = [:]

  var permissions: Dictionary<String,Border0_V1_Permissions> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_AuthorizePeerResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: String = String()

  var allowedActions: Dictionary<String,Border0_V1_actionList> = [:]

  var info: Dictionary<String,Border0_V1_infoList> = [:]

  var permissions: Dictionary<String,Border0_V1_Permissions> = [:]

  var email: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_SessionUpdateRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sessionKey: String = String()

  var socketID: String = String()

  var userData: String = String()

  var result: String = String()

  var authInfoFailed: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_SessionRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: String {
    get {return _storage._requestID}
    set {_uniqueStorage()._requestID = newValue}
  }

  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {_uniqueStorage()._startTime = nil}

  var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return _storage._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {_uniqueStorage()._endTime = nil}

  var lastSeen: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._lastSeen ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._lastSeen = newValue}
  }
  /// Returns true if `lastSeen` has been explicitly set.
  var hasLastSeen: Bool {return _storage._lastSeen != nil}
  /// Clears the value of `lastSeen`. Subsequent reads from it will return its default value.
  mutating func clearLastSeen() {_uniqueStorage()._lastSeen = nil}

  var email: String {
    get {return _storage._email}
    set {_uniqueStorage()._email = newValue}
  }

  var logType: String {
    get {return _storage._logType}
    set {_uniqueStorage()._logType = newValue}
  }

  var socketID: String {
    get {return _storage._socketID}
    set {_uniqueStorage()._socketID = newValue}
  }

  var serverName: String {
    get {return _storage._serverName}
    set {_uniqueStorage()._serverName = newValue}
  }

  var serverPort: String {
    get {return _storage._serverPort}
    set {_uniqueStorage()._serverPort = newValue}
  }

  var clientIp: String {
    get {return _storage._clientIp}
    set {_uniqueStorage()._clientIp = newValue}
  }

  var clientPort: String {
    get {return _storage._clientPort}
    set {_uniqueStorage()._clientPort = newValue}
  }

  var sessionData: String {
    get {return _storage._sessionData}
    set {_uniqueStorage()._sessionData = newValue}
  }

  var sessionKey: String {
    get {return _storage._sessionKey}
    set {_uniqueStorage()._sessionKey = newValue}
  }

  var result: String {
    get {return _storage._result}
    set {_uniqueStorage()._result = newValue}
  }

  var authInfo: String {
    get {return _storage._authInfo}
    set {_uniqueStorage()._authInfo = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Border0_V1_SessionResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: String = String()

  var sessionID: String = String()

  var sshTicket: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_SessionEvent: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sessionKey: String = String()

  var socketID: String = String()

  var type: String = String()

  var status: String = String()

  var metadata: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_SshCertificateSignRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: String = String()

  var socketID: String = String()

  var sessionKey: String = String()

  var userEmail: String = String()

  var publicKey: Data = Data()

  var ticket: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_SshCertificateSignResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: String = String()

  var certificate: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_UploadRecording: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// session identifier (unique globally)
  var sessionKey: String = String()

  /// recording identifier (unique per-session)
  var recordingID: String = String()

  /// actual recording bytes
  var recording: Data = Data()

  /// type of the recording e.g. asciinema, log, etc...
  var recordingType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_CertificateSignRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: String = String()

  var certificateSigningRequest: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_V1_CertificateSignResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var requestID: String = String()

  var certificate: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "border0.v1"

extension Border0_V1_Action: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CREATE"),
    1: .same(proto: "UPDATE"),
    2: .same(proto: "DELETE"),
    3: .same(proto: "OTHER"),
  ]
}

extension Border0_V1_ControlStreamRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ControlStreamRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "config"),
    2: .same(proto: "heartbeat"),
    3: .standard(proto: "plugin_discovery_results"),
    5: .standard(proto: "tunnel_certificate_sign_request"),
    6: .same(proto: "log"),
    7: .same(proto: "metadata"),
    8: .same(proto: "authorize"),
    9: .standard(proto: "session_update"),
    10: .standard(proto: "ssh_certificate_sign_request"),
    11: .standard(proto: "upload_recording"),
    12: .standard(proto: "Certificate_sign_request"),
    13: .standard(proto: "session_event"),
    14: .standard(proto: "discovery_details"),
    15: .standard(proto: "authorize_peer"),
    16: .same(proto: "session"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Border0_V1_Config?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .config(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .config(v)
        }
      }()
      case 2: try {
        var v: Border0_Common_V1_HeartbeatMessage?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .heartbeat(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .heartbeat(v)
        }
      }()
      case 3: try {
        var v: Border0_V1_PluginDiscoveryResults?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .pluginDiscoveryResults(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .pluginDiscoveryResults(v)
        }
      }()
      case 5: try {
        var v: Border0_V1_TunnelCertificateSignRequest?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .tunnelCertificateSignRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .tunnelCertificateSignRequest(v)
        }
      }()
      case 6: try {
        var v: Border0_V1_Log?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .log(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .log(v)
        }
      }()
      case 7: try {
        var v: Border0_V1_ConnectorMetadata?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .metadata(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .metadata(v)
        }
      }()
      case 8: try {
        var v: Border0_V1_AuthorizeRequest?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .authorize(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .authorize(v)
        }
      }()
      case 9: try {
        var v: Border0_V1_SessionUpdateRequest?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .sessionUpdate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .sessionUpdate(v)
        }
      }()
      case 10: try {
        var v: Border0_V1_SshCertificateSignRequest?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .sshCertificateSignRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .sshCertificateSignRequest(v)
        }
      }()
      case 11: try {
        var v: Border0_V1_UploadRecording?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .uploadRecording(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .uploadRecording(v)
        }
      }()
      case 12: try {
        var v: Border0_V1_CertificateSignRequest?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .certificateSignRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .certificateSignRequest(v)
        }
      }()
      case 13: try {
        var v: Border0_V1_SessionEvent?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .sessionEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .sessionEvent(v)
        }
      }()
      case 14: try {
        var v: Border0_Common_V1_DiscoveryDetailsMessage?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .discoveryDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .discoveryDetails(v)
        }
      }()
      case 15: try {
        var v: Border0_V1_AuthorizePeerRequest?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .authorizePeer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .authorizePeer(v)
        }
      }()
      case 16: try {
        var v: Border0_V1_SessionRequest?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .session(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .session(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.requestType {
    case .config?: try {
      guard case .config(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .heartbeat?: try {
      guard case .heartbeat(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .pluginDiscoveryResults?: try {
      guard case .pluginDiscoveryResults(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .tunnelCertificateSignRequest?: try {
      guard case .tunnelCertificateSignRequest(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .log?: try {
      guard case .log(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .metadata?: try {
      guard case .metadata(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .authorize?: try {
      guard case .authorize(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .sessionUpdate?: try {
      guard case .sessionUpdate(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .sshCertificateSignRequest?: try {
      guard case .sshCertificateSignRequest(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .uploadRecording?: try {
      guard case .uploadRecording(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .certificateSignRequest?: try {
      guard case .certificateSignRequest(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .sessionEvent?: try {
      guard case .sessionEvent(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .discoveryDetails?: try {
      guard case .discoveryDetails(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .authorizePeer?: try {
      guard case .authorizePeer(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .session?: try {
      guard case .session(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_ControlStreamRequest, rhs: Border0_V1_ControlStreamRequest) -> Bool {
    if lhs.requestType != rhs.requestType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_ControlStreamResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ControlStreamResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "init"),
    2: .standard(proto: "connector_config"),
    3: .standard(proto: "update_config"),
    4: .same(proto: "heartbeat"),
    5: .standard(proto: "tunnel_certificate_sign_response"),
    6: .same(proto: "discover"),
    7: .same(proto: "stop"),
    8: .same(proto: "disconnect"),
    9: .same(proto: "authorize"),
    10: .standard(proto: "ssh_certificate_sign_response"),
    11: .standard(proto: "Certificate_sign_response"),
    12: .standard(proto: "network_state"),
    13: .standard(proto: "peer_online"),
    14: .standard(proto: "peer_offline"),
    15: .standard(proto: "authorize_peer"),
    16: .same(proto: "session"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Border0_V1_Init?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .init_p(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .init_p(v)
        }
      }()
      case 2: try {
        var v: Border0_V1_ConnectorConfig?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .connectorConfig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .connectorConfig(v)
        }
      }()
      case 3: try {
        var v: Border0_V1_UpdateConfig?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .updateConfig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .updateConfig(v)
        }
      }()
      case 4: try {
        var v: Border0_Common_V1_HeartbeatMessage?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .heartbeat(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .heartbeat(v)
        }
      }()
      case 5: try {
        var v: Border0_V1_TunnelCertificateSignResponse?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .tunnelCertificateSignResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .tunnelCertificateSignResponse(v)
        }
      }()
      case 6: try {
        var v: Border0_V1_Discover?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .discover(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .discover(v)
        }
      }()
      case 7: try {
        var v: Border0_V1_Stop?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .stop(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .stop(v)
        }
      }()
      case 8: try {
        var v: Border0_V1_Disconnect?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .disconnect(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .disconnect(v)
        }
      }()
      case 9: try {
        var v: Border0_V1_AuthorizeResponse?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .authorize(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .authorize(v)
        }
      }()
      case 10: try {
        var v: Border0_V1_SshCertificateSignResponse?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .sshCertificateSignResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .sshCertificateSignResponse(v)
        }
      }()
      case 11: try {
        var v: Border0_V1_CertificateSignResponse?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .certificateSignResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .certificateSignResponse(v)
        }
      }()
      case 12: try {
        var v: Border0_Common_V1_NetworkStateMessage?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .networkState(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .networkState(v)
        }
      }()
      case 13: try {
        var v: Border0_Common_V1_PeerOnlineMessage?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .peerOnline(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .peerOnline(v)
        }
      }()
      case 14: try {
        var v: Border0_Common_V1_PeerOfflineMessage?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .peerOffline(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .peerOffline(v)
        }
      }()
      case 15: try {
        var v: Border0_V1_AuthorizePeerResponse?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .authorizePeer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .authorizePeer(v)
        }
      }()
      case 16: try {
        var v: Border0_V1_SessionResponse?
        var hadOneofValue = false
        if let current = self.requestType {
          hadOneofValue = true
          if case .session(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.requestType = .session(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.requestType {
    case .init_p?: try {
      guard case .init_p(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .connectorConfig?: try {
      guard case .connectorConfig(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .updateConfig?: try {
      guard case .updateConfig(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .heartbeat?: try {
      guard case .heartbeat(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .tunnelCertificateSignResponse?: try {
      guard case .tunnelCertificateSignResponse(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .discover?: try {
      guard case .discover(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .stop?: try {
      guard case .stop(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .disconnect?: try {
      guard case .disconnect(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .authorize?: try {
      guard case .authorize(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .sshCertificateSignResponse?: try {
      guard case .sshCertificateSignResponse(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .certificateSignResponse?: try {
      guard case .certificateSignResponse(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .networkState?: try {
      guard case .networkState(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .peerOnline?: try {
      guard case .peerOnline(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .peerOffline?: try {
      guard case .peerOffline(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .authorizePeer?: try {
      guard case .authorizePeer(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .session?: try {
      guard case .session(let v)? = self.requestType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_ControlStreamResponse, rhs: Border0_V1_ControlStreamResponse) -> Bool {
    if lhs.requestType != rhs.requestType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_Organization: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Organization"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "subdomain"),
    4: .same(proto: "certificates"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.subdomain) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._certificates) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.subdomain.isEmpty {
      try visitor.visitSingularStringField(value: self.subdomain, fieldNumber: 3)
    }
    try { if let v = self._certificates {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_Organization, rhs: Border0_V1_Organization) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.subdomain != rhs.subdomain {return false}
    if lhs._certificates != rhs._certificates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_TunnelCertificateSignRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TunnelCertificateSignRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .standard(proto: "socket_id"),
    3: .standard(proto: "public_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.socketID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.publicKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.socketID.isEmpty {
      try visitor.visitSingularStringField(value: self.socketID, fieldNumber: 2)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.publicKey, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_TunnelCertificateSignRequest, rhs: Border0_V1_TunnelCertificateSignRequest) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.socketID != rhs.socketID {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_TunnelCertificateSignResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TunnelCertificateSignResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .same(proto: "certificate"),
    3: .same(proto: "hostkey"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.certificate) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.hostkey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.certificate.isEmpty {
      try visitor.visitSingularStringField(value: self.certificate, fieldNumber: 2)
    }
    if !self.hostkey.isEmpty {
      try visitor.visitSingularStringField(value: self.hostkey, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_TunnelCertificateSignResponse, rhs: Border0_V1_TunnelCertificateSignResponse) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.certificate != rhs.certificate {return false}
    if lhs.hostkey != rhs.hostkey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_Init: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Init"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "connector_config"),
    2: .same(proto: "sockets"),
    3: .same(proto: "plugins"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._connectorConfig) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.sockets) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.plugins) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._connectorConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.sockets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sockets, fieldNumber: 2)
    }
    if !self.plugins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.plugins, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_Init, rhs: Border0_V1_Init) -> Bool {
    if lhs._connectorConfig != rhs._connectorConfig {return false}
    if lhs.sockets != rhs.sockets {return false}
    if lhs.plugins != rhs.plugins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_UpdateConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "action"),
    2: .standard(proto: "plugin_config"),
    3: .standard(proto: "socket_config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.action) }()
      case 2: try {
        var v: Border0_V1_PluginConfig?
        var hadOneofValue = false
        if let current = self.configType {
          hadOneofValue = true
          if case .pluginConfig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.configType = .pluginConfig(v)
        }
      }()
      case 3: try {
        var v: Border0_V1_SocketConfig?
        var hadOneofValue = false
        if let current = self.configType {
          hadOneofValue = true
          if case .socketConfig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.configType = .socketConfig(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.action != .create {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 1)
    }
    switch self.configType {
    case .pluginConfig?: try {
      guard case .pluginConfig(let v)? = self.configType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .socketConfig?: try {
      guard case .socketConfig(let v)? = self.configType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_UpdateConfig, rhs: Border0_V1_UpdateConfig) -> Bool {
    if lhs.action != rhs.action {return false}
    if lhs.configType != rhs.configType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_Log: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Log"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "connector_id"),
    2: .standard(proto: "socket_id"),
    3: .standard(proto: "plugin_id"),
    4: .same(proto: "timestamp"),
    5: .same(proto: "severity"),
    6: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.connectorID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.socketID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.pluginID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.severity) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.connectorID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectorID, fieldNumber: 1)
    }
    if !self.socketID.isEmpty {
      try visitor.visitSingularStringField(value: self.socketID, fieldNumber: 2)
    }
    if !self.pluginID.isEmpty {
      try visitor.visitSingularStringField(value: self.pluginID, fieldNumber: 3)
    }
    try { if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.severity.isEmpty {
      try visitor.visitSingularStringField(value: self.severity, fieldNumber: 5)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_Log, rhs: Border0_V1_Log) -> Bool {
    if lhs.connectorID != rhs.connectorID {return false}
    if lhs.socketID != rhs.socketID {return false}
    if lhs.pluginID != rhs.pluginID {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.severity != rhs.severity {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_ConnectorMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectorMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_ConnectorMetadata, rhs: Border0_V1_ConnectorMetadata) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_Config: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Config"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "connector"),
    2: .same(proto: "sockets"),
    3: .same(proto: "plugins"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.connector) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.sockets) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.plugins) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.connector != false {
      try visitor.visitSingularBoolField(value: self.connector, fieldNumber: 1)
    }
    if self.sockets != false {
      try visitor.visitSingularBoolField(value: self.sockets, fieldNumber: 2)
    }
    if self.plugins != false {
      try visitor.visitSingularBoolField(value: self.plugins, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_Config, rhs: Border0_V1_Config) -> Bool {
    if lhs.connector != rhs.connector {return false}
    if lhs.sockets != rhs.sockets {return false}
    if lhs.plugins != rhs.plugins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_PluginDiscoveryResults: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PluginDiscoveryResults"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "plugin_id"),
    2: .standard(proto: "request_id"),
    3: .same(proto: "metadata"),
    4: .same(proto: "resources"),
    5: .same(proto: "errors"),
    6: .same(proto: "warnings"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.pluginID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.resources) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.errors) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.warnings) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.pluginID.isEmpty {
      try visitor.visitSingularStringField(value: self.pluginID, fieldNumber: 1)
    }
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 2)
    }
    try { if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.resources.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.resources, fieldNumber: 4)
    }
    if !self.errors.isEmpty {
      try visitor.visitRepeatedStringField(value: self.errors, fieldNumber: 5)
    }
    if !self.warnings.isEmpty {
      try visitor.visitRepeatedStringField(value: self.warnings, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_PluginDiscoveryResults, rhs: Border0_V1_PluginDiscoveryResults) -> Bool {
    if lhs.pluginID != rhs.pluginID {return false}
    if lhs.requestID != rhs.requestID {return false}
    if lhs._metadata != rhs._metadata {return false}
    if lhs.resources != rhs.resources {return false}
    if lhs.errors != rhs.errors {return false}
    if lhs.warnings != rhs.warnings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_PluginDiscoveryResultsMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PluginDiscoveryResultsMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "discovery_id"),
    2: .standard(proto: "started_at"),
    3: .standard(proto: "ended_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.discoveryID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._startedAt) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._endedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.discoveryID.isEmpty {
      try visitor.visitSingularStringField(value: self.discoveryID, fieldNumber: 1)
    }
    try { if let v = self._startedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._endedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_PluginDiscoveryResultsMetadata, rhs: Border0_V1_PluginDiscoveryResultsMetadata) -> Bool {
    if lhs.discoveryID != rhs.discoveryID {return false}
    if lhs._startedAt != rhs._startedAt {return false}
    if lhs._endedAt != rhs._endedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_Tag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Tag"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_Tag, rhs: Border0_V1_Tag) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_SocketConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SocketConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "type"),
    4: .same(proto: "config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._config) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 3)
    }
    try { if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_SocketConfig, rhs: Border0_V1_SocketConfig) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs._config != rhs._config {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_ConnectorConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectorConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "heartbeat_interval"),
    3: .same(proto: "organization"),
    4: .standard(proto: "private_network_enabled"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.heartbeatInterval) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._organization) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.privateNetworkEnabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.heartbeatInterval != 0 {
      try visitor.visitSingularInt32Field(value: self.heartbeatInterval, fieldNumber: 2)
    }
    try { if let v = self._organization {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.privateNetworkEnabled != false {
      try visitor.visitSingularBoolField(value: self.privateNetworkEnabled, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_ConnectorConfig, rhs: Border0_V1_ConnectorConfig) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.heartbeatInterval != rhs.heartbeatInterval {return false}
    if lhs._organization != rhs._organization {return false}
    if lhs.privateNetworkEnabled != rhs.privateNetworkEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_PluginConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PluginConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "type"),
    4: .same(proto: "config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._config) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 3)
    }
    try { if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_PluginConfig, rhs: Border0_V1_PluginConfig) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs._config != rhs._config {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_Discover: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Discover"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "request_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_Discover, rhs: Border0_V1_Discover) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.requestID != rhs.requestID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_Stop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Stop"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reason"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.reason) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_Stop, rhs: Border0_V1_Stop) -> Bool {
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_Disconnect: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Disconnect"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reason"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.reason) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_Disconnect, rhs: Border0_V1_Disconnect) -> Bool {
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_AuthorizeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthorizeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .same(proto: "protocol"),
    3: .standard(proto: "user_email"),
    4: .standard(proto: "ip_address"),
    5: .standard(proto: "session_key"),
    6: .standard(proto: "socket_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.`protocol`) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.userEmail) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.ipAddress) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.sessionKey) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.socketID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.`protocol`.isEmpty {
      try visitor.visitSingularStringField(value: self.`protocol`, fieldNumber: 2)
    }
    if !self.userEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.userEmail, fieldNumber: 3)
    }
    if !self.ipAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ipAddress, fieldNumber: 4)
    }
    if !self.sessionKey.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionKey, fieldNumber: 5)
    }
    if !self.socketID.isEmpty {
      try visitor.visitSingularStringField(value: self.socketID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_AuthorizeRequest, rhs: Border0_V1_AuthorizeRequest) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.`protocol` != rhs.`protocol` {return false}
    if lhs.userEmail != rhs.userEmail {return false}
    if lhs.ipAddress != rhs.ipAddress {return false}
    if lhs.sessionKey != rhs.sessionKey {return false}
    if lhs.socketID != rhs.socketID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_AuthorizePeerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthorizePeerRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .same(proto: "protocol"),
    3: .standard(proto: "public_key"),
    4: .standard(proto: "ip_address"),
    5: .standard(proto: "socket_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.`protocol`) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.publicKey) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.ipAddress) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.socketID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.`protocol`.isEmpty {
      try visitor.visitSingularStringField(value: self.`protocol`, fieldNumber: 2)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.publicKey, fieldNumber: 3)
    }
    if !self.ipAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ipAddress, fieldNumber: 4)
    }
    if !self.socketID.isEmpty {
      try visitor.visitSingularStringField(value: self.socketID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_AuthorizePeerRequest, rhs: Border0_V1_AuthorizePeerRequest) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.`protocol` != rhs.`protocol` {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.ipAddress != rhs.ipAddress {return false}
    if lhs.socketID != rhs.socketID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_actionList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".actionList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.values) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedStringField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_actionList, rhs: Border0_V1_actionList) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_Permissions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Permissions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "permissions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.permissions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.permissions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.permissions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_Permissions, rhs: Border0_V1_Permissions) -> Bool {
    if lhs.permissions != rhs.permissions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_infoList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".infoList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.values) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedStringField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_infoList, rhs: Border0_V1_infoList) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_AuthorizeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthorizeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .standard(proto: "allowed_actions"),
    3: .same(proto: "info"),
    5: .same(proto: "permissions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Border0_V1_actionList>.self, value: &self.allowedActions) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Border0_V1_infoList>.self, value: &self.info) }()
      case 5: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Border0_V1_Permissions>.self, value: &self.permissions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.allowedActions.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Border0_V1_actionList>.self, value: self.allowedActions, fieldNumber: 2)
    }
    if !self.info.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Border0_V1_infoList>.self, value: self.info, fieldNumber: 3)
    }
    if !self.permissions.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Border0_V1_Permissions>.self, value: self.permissions, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_AuthorizeResponse, rhs: Border0_V1_AuthorizeResponse) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.allowedActions != rhs.allowedActions {return false}
    if lhs.info != rhs.info {return false}
    if lhs.permissions != rhs.permissions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_AuthorizePeerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthorizePeerResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .standard(proto: "allowed_actions"),
    3: .same(proto: "info"),
    5: .same(proto: "permissions"),
    6: .same(proto: "email"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 2: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Border0_V1_actionList>.self, value: &self.allowedActions) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Border0_V1_infoList>.self, value: &self.info) }()
      case 5: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Border0_V1_Permissions>.self, value: &self.permissions) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.email) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.allowedActions.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Border0_V1_actionList>.self, value: self.allowedActions, fieldNumber: 2)
    }
    if !self.info.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Border0_V1_infoList>.self, value: self.info, fieldNumber: 3)
    }
    if !self.permissions.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Border0_V1_Permissions>.self, value: self.permissions, fieldNumber: 5)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_AuthorizePeerResponse, rhs: Border0_V1_AuthorizePeerResponse) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.allowedActions != rhs.allowedActions {return false}
    if lhs.info != rhs.info {return false}
    if lhs.permissions != rhs.permissions {return false}
    if lhs.email != rhs.email {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_SessionUpdateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SessionUpdateRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "session_key"),
    2: .standard(proto: "socket_id"),
    3: .standard(proto: "user_data"),
    4: .same(proto: "result"),
    5: .standard(proto: "auth_info_failed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sessionKey) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.socketID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.userData) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.result) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.authInfoFailed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sessionKey.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionKey, fieldNumber: 1)
    }
    if !self.socketID.isEmpty {
      try visitor.visitSingularStringField(value: self.socketID, fieldNumber: 2)
    }
    if !self.userData.isEmpty {
      try visitor.visitSingularStringField(value: self.userData, fieldNumber: 3)
    }
    if !self.result.isEmpty {
      try visitor.visitSingularStringField(value: self.result, fieldNumber: 4)
    }
    if !self.authInfoFailed.isEmpty {
      try visitor.visitSingularStringField(value: self.authInfoFailed, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_SessionUpdateRequest, rhs: Border0_V1_SessionUpdateRequest) -> Bool {
    if lhs.sessionKey != rhs.sessionKey {return false}
    if lhs.socketID != rhs.socketID {return false}
    if lhs.userData != rhs.userData {return false}
    if lhs.result != rhs.result {return false}
    if lhs.authInfoFailed != rhs.authInfoFailed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_SessionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SessionRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .standard(proto: "start_time"),
    3: .standard(proto: "end_time"),
    4: .standard(proto: "last_seen"),
    5: .same(proto: "email"),
    6: .standard(proto: "log_type"),
    7: .standard(proto: "socket_id"),
    8: .standard(proto: "server_name"),
    9: .standard(proto: "server_port"),
    10: .standard(proto: "client_ip"),
    11: .standard(proto: "client_port"),
    12: .standard(proto: "session_data"),
    13: .standard(proto: "session_key"),
    14: .same(proto: "result"),
    15: .standard(proto: "auth_info"),
  ]

  fileprivate class _StorageClass {
    var _requestID: String = String()
    var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _lastSeen: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _email: String = String()
    var _logType: String = String()
    var _socketID: String = String()
    var _serverName: String = String()
    var _serverPort: String = String()
    var _clientIp: String = String()
    var _clientPort: String = String()
    var _sessionData: String = String()
    var _sessionKey: String = String()
    var _result: String = String()
    var _authInfo: String = String()

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _requestID = source._requestID
      _startTime = source._startTime
      _endTime = source._endTime
      _lastSeen = source._lastSeen
      _email = source._email
      _logType = source._logType
      _socketID = source._socketID
      _serverName = source._serverName
      _serverPort = source._serverPort
      _clientIp = source._clientIp
      _clientPort = source._clientPort
      _sessionData = source._sessionData
      _sessionKey = source._sessionKey
      _result = source._result
      _authInfo = source._authInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._requestID) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._startTime) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._endTime) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._lastSeen) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._email) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._logType) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._socketID) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._serverName) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._serverPort) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._clientIp) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._clientPort) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._sessionData) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._sessionKey) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._result) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._authInfo) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._requestID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._requestID, fieldNumber: 1)
      }
      try { if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._endTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._lastSeen {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._email.isEmpty {
        try visitor.visitSingularStringField(value: _storage._email, fieldNumber: 5)
      }
      if !_storage._logType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._logType, fieldNumber: 6)
      }
      if !_storage._socketID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._socketID, fieldNumber: 7)
      }
      if !_storage._serverName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serverName, fieldNumber: 8)
      }
      if !_storage._serverPort.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serverPort, fieldNumber: 9)
      }
      if !_storage._clientIp.isEmpty {
        try visitor.visitSingularStringField(value: _storage._clientIp, fieldNumber: 10)
      }
      if !_storage._clientPort.isEmpty {
        try visitor.visitSingularStringField(value: _storage._clientPort, fieldNumber: 11)
      }
      if !_storage._sessionData.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sessionData, fieldNumber: 12)
      }
      if !_storage._sessionKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sessionKey, fieldNumber: 13)
      }
      if !_storage._result.isEmpty {
        try visitor.visitSingularStringField(value: _storage._result, fieldNumber: 14)
      }
      if !_storage._authInfo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._authInfo, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_SessionRequest, rhs: Border0_V1_SessionRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._requestID != rhs_storage._requestID {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._endTime != rhs_storage._endTime {return false}
        if _storage._lastSeen != rhs_storage._lastSeen {return false}
        if _storage._email != rhs_storage._email {return false}
        if _storage._logType != rhs_storage._logType {return false}
        if _storage._socketID != rhs_storage._socketID {return false}
        if _storage._serverName != rhs_storage._serverName {return false}
        if _storage._serverPort != rhs_storage._serverPort {return false}
        if _storage._clientIp != rhs_storage._clientIp {return false}
        if _storage._clientPort != rhs_storage._clientPort {return false}
        if _storage._sessionData != rhs_storage._sessionData {return false}
        if _storage._sessionKey != rhs_storage._sessionKey {return false}
        if _storage._result != rhs_storage._result {return false}
        if _storage._authInfo != rhs_storage._authInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_SessionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SessionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .standard(proto: "session_id"),
    3: .standard(proto: "ssh_ticket"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.sshTicket) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.sessionID.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionID, fieldNumber: 2)
    }
    if !self.sshTicket.isEmpty {
      try visitor.visitSingularBytesField(value: self.sshTicket, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_SessionResponse, rhs: Border0_V1_SessionResponse) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.sshTicket != rhs.sshTicket {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_SessionEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SessionEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "session_key"),
    2: .standard(proto: "socket_id"),
    3: .same(proto: "type"),
    4: .same(proto: "status"),
    5: .same(proto: "metadata"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sessionKey) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.socketID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.status) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.metadata) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sessionKey.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionKey, fieldNumber: 1)
    }
    if !self.socketID.isEmpty {
      try visitor.visitSingularStringField(value: self.socketID, fieldNumber: 2)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 3)
    }
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 4)
    }
    if !self.metadata.isEmpty {
      try visitor.visitSingularStringField(value: self.metadata, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_SessionEvent, rhs: Border0_V1_SessionEvent) -> Bool {
    if lhs.sessionKey != rhs.sessionKey {return false}
    if lhs.socketID != rhs.socketID {return false}
    if lhs.type != rhs.type {return false}
    if lhs.status != rhs.status {return false}
    if lhs.metadata != rhs.metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_SshCertificateSignRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SshCertificateSignRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .standard(proto: "socket_id"),
    3: .standard(proto: "session_key"),
    4: .standard(proto: "user_email"),
    5: .standard(proto: "public_key"),
    6: .same(proto: "ticket"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.socketID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sessionKey) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.userEmail) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.publicKey) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.ticket) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.socketID.isEmpty {
      try visitor.visitSingularStringField(value: self.socketID, fieldNumber: 2)
    }
    if !self.sessionKey.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionKey, fieldNumber: 3)
    }
    if !self.userEmail.isEmpty {
      try visitor.visitSingularStringField(value: self.userEmail, fieldNumber: 4)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 5)
    }
    if !self.ticket.isEmpty {
      try visitor.visitSingularBytesField(value: self.ticket, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_SshCertificateSignRequest, rhs: Border0_V1_SshCertificateSignRequest) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.socketID != rhs.socketID {return false}
    if lhs.sessionKey != rhs.sessionKey {return false}
    if lhs.userEmail != rhs.userEmail {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.ticket != rhs.ticket {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_SshCertificateSignResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SshCertificateSignResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .same(proto: "certificate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.certificate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.certificate.isEmpty {
      try visitor.visitSingularBytesField(value: self.certificate, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_SshCertificateSignResponse, rhs: Border0_V1_SshCertificateSignResponse) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.certificate != rhs.certificate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_UploadRecording: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UploadRecording"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "session_key"),
    2: .standard(proto: "recording_id"),
    3: .same(proto: "recording"),
    4: .standard(proto: "recording_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sessionKey) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.recordingID) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.recording) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.recordingType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sessionKey.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionKey, fieldNumber: 1)
    }
    if !self.recordingID.isEmpty {
      try visitor.visitSingularStringField(value: self.recordingID, fieldNumber: 2)
    }
    if !self.recording.isEmpty {
      try visitor.visitSingularBytesField(value: self.recording, fieldNumber: 3)
    }
    if !self.recordingType.isEmpty {
      try visitor.visitSingularStringField(value: self.recordingType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_UploadRecording, rhs: Border0_V1_UploadRecording) -> Bool {
    if lhs.sessionKey != rhs.sessionKey {return false}
    if lhs.recordingID != rhs.recordingID {return false}
    if lhs.recording != rhs.recording {return false}
    if lhs.recordingType != rhs.recordingType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_CertificateSignRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CertificateSignRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .standard(proto: "certificate_signing_request"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.certificateSigningRequest) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.certificateSigningRequest.isEmpty {
      try visitor.visitSingularBytesField(value: self.certificateSigningRequest, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_CertificateSignRequest, rhs: Border0_V1_CertificateSignRequest) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.certificateSigningRequest != rhs.certificateSigningRequest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_V1_CertificateSignResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CertificateSignResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_id"),
    2: .same(proto: "certificate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requestID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.certificate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requestID.isEmpty {
      try visitor.visitSingularStringField(value: self.requestID, fieldNumber: 1)
    }
    if !self.certificate.isEmpty {
      try visitor.visitSingularBytesField(value: self.certificate, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_V1_CertificateSignResponse, rhs: Border0_V1_CertificateSignResponse) -> Bool {
    if lhs.requestID != rhs.requestID {return false}
    if lhs.certificate != rhs.certificate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
