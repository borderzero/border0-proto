// sets the .proto file syntax version
syntax = "proto3";

// sets the output golang package name
option go_package = "github.com/borderzero/border0-proto/device";

// sets the protobuf package name (i.e. definitions namespace)
package border0.device.v1;

// the stream (rpc) service for the Border0 api to manage devices
service DeviceManagementService {
  rpc ControlStream(stream DeviceToServerMessage) returns (stream ServerToDeviceMessage);
}

// messages from devices to the server (api)
message DeviceToServerMessage {
  oneof Message {
    AuthChallengeSolutionMessage authChallengeSolutionMessage = 1;
    DiscoveryDetailsMessage discoveryDetailsMessage = 2;
    HeartbeatMessage heartbeatMessage = 3;
  }
}

// messages from the server (api) to devices
message ServerToDeviceMessage {
  oneof Message {
    AuthChallengeMessage authChallengeMessage = 1;
    HeartbeatMessage heartbeatMessage = 2;
    NetworkStateMessage networkStateMessage = 3;
    PeerOnlineMessage peerOnlineMessage = 4;
  }
}

message AuthChallengeMessage {
  string serverPublicKey = 1;
  bytes challenge = 2;
  bytes challengeNonce = 3;
}

message AuthChallengeSolutionMessage {
  bytes solved = 1;
  bytes solvedNonce = 2;
}

message DiscoveryDetailsMessage {
  bool discoverable = 1;                    // whether the peer should be returned along with the networks its in
  string endpoint_udp4 = 2;                 // the endpoint (IPv4 + port) to send packets to for the peer
}

message HeartbeatMessage {}

message PeerOnlineMessage {
  string networkID = 1;
  WireGuardPeer peer = 2;
}

message NetworkStateMessage {
  string networkID = 1;
  string networkCIDRV4 = 2;
  string networkCIDRV6 = 3;
  string selfIPv4 = 4;
  string selfIPv6 = 5;
  repeated WireGuardPeer onlinePeers = 6;
}

message WireGuardPeer {
  string public_key = 1;                    // the public key of the peer, used for identification and encryption
  string IPv4 = 2;                          // the peer's (private) IPv4 address in the wireguard network
  string IPv6 = 3;                          // the peer's (private) IPv6 address in the wireguard network
  repeated string allowed_ips = 4;          // list of routes (CIDRs) to be routed through this peer (most peers will just have their own IP/32)
  repeated string endpoints = 5;            // the endpoints to try send packets to for the peer e.g. updv4, udpv6, relayv4, relayv6, etc...
  uint32 persistent_keepalive_interval = 6; // the interval (in seconds) for sending keepalive packets (0 means disabled)
}
