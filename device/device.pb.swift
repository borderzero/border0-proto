// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: device.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// sets the .proto file syntax version

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// messages from devices to the server (api)
struct Border0_Device_V1_DeviceToServerMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: Border0_Device_V1_DeviceToServerMessage.OneOf_Message? = nil

  var authChallengeSolution: Border0_Device_V1_AuthChallengeSolutionMessage {
    get {
      if case .authChallengeSolution(let v)? = message {return v}
      return Border0_Device_V1_AuthChallengeSolutionMessage()
    }
    set {message = .authChallengeSolution(newValue)}
  }

  var discoveryDetails: Border0_Common_V1_DiscoveryDetailsMessage {
    get {
      if case .discoveryDetails(let v)? = message {return v}
      return Border0_Common_V1_DiscoveryDetailsMessage()
    }
    set {message = .discoveryDetails(newValue)}
  }

  var heartbeat: Border0_Common_V1_HeartbeatMessage {
    get {
      if case .heartbeat(let v)? = message {return v}
      return Border0_Common_V1_HeartbeatMessage()
    }
    set {message = .heartbeat(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Message: Equatable, Sendable {
    case authChallengeSolution(Border0_Device_V1_AuthChallengeSolutionMessage)
    case discoveryDetails(Border0_Common_V1_DiscoveryDetailsMessage)
    case heartbeat(Border0_Common_V1_HeartbeatMessage)

  }

  init() {}
}

/// messages from the server (api) to devices
struct Border0_Device_V1_ServerToDeviceMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: Border0_Device_V1_ServerToDeviceMessage.OneOf_Message? = nil

  var authChallenge: Border0_Device_V1_AuthChallengeMessage {
    get {
      if case .authChallenge(let v)? = message {return v}
      return Border0_Device_V1_AuthChallengeMessage()
    }
    set {message = .authChallenge(newValue)}
  }

  var heartbeat: Border0_Common_V1_HeartbeatMessage {
    get {
      if case .heartbeat(let v)? = message {return v}
      return Border0_Common_V1_HeartbeatMessage()
    }
    set {message = .heartbeat(newValue)}
  }

  var networkState: Border0_Common_V1_NetworkStateMessage {
    get {
      if case .networkState(let v)? = message {return v}
      return Border0_Common_V1_NetworkStateMessage()
    }
    set {message = .networkState(newValue)}
  }

  var peerOnline: Border0_Common_V1_PeerOnlineMessage {
    get {
      if case .peerOnline(let v)? = message {return v}
      return Border0_Common_V1_PeerOnlineMessage()
    }
    set {message = .peerOnline(newValue)}
  }

  var peerOffline: Border0_Common_V1_PeerOfflineMessage {
    get {
      if case .peerOffline(let v)? = message {return v}
      return Border0_Common_V1_PeerOfflineMessage()
    }
    set {message = .peerOffline(newValue)}
  }

  var disconnect: Border0_Common_V1_DisconnectMessage {
    get {
      if case .disconnect(let v)? = message {return v}
      return Border0_Common_V1_DisconnectMessage()
    }
    set {message = .disconnect(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Message: Equatable, Sendable {
    case authChallenge(Border0_Device_V1_AuthChallengeMessage)
    case heartbeat(Border0_Common_V1_HeartbeatMessage)
    case networkState(Border0_Common_V1_NetworkStateMessage)
    case peerOnline(Border0_Common_V1_PeerOnlineMessage)
    case peerOffline(Border0_Common_V1_PeerOfflineMessage)
    case disconnect(Border0_Common_V1_DisconnectMessage)

  }

  init() {}
}

struct Border0_Device_V1_AuthChallengeMessage: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var serverPublicKey: String = String()

  var challenge: Data = Data()

  var challengeNonce: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Border0_Device_V1_AuthChallengeSolutionMessage: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var solved: Data = Data()

  var solvedNonce: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "border0.device.v1"

extension Border0_Device_V1_DeviceToServerMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceToServerMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "auth_challenge_solution"),
    2: .standard(proto: "discovery_details"),
    3: .same(proto: "heartbeat"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Border0_Device_V1_AuthChallengeSolutionMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .authChallengeSolution(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .authChallengeSolution(v)
        }
      }()
      case 2: try {
        var v: Border0_Common_V1_DiscoveryDetailsMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .discoveryDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .discoveryDetails(v)
        }
      }()
      case 3: try {
        var v: Border0_Common_V1_HeartbeatMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .heartbeat(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .heartbeat(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .authChallengeSolution?: try {
      guard case .authChallengeSolution(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .discoveryDetails?: try {
      guard case .discoveryDetails(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .heartbeat?: try {
      guard case .heartbeat(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_Device_V1_DeviceToServerMessage, rhs: Border0_Device_V1_DeviceToServerMessage) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_Device_V1_ServerToDeviceMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServerToDeviceMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "auth_challenge"),
    2: .same(proto: "heartbeat"),
    3: .standard(proto: "network_state"),
    4: .standard(proto: "peer_online"),
    5: .standard(proto: "peer_offline"),
    6: .same(proto: "disconnect"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Border0_Device_V1_AuthChallengeMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .authChallenge(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .authChallenge(v)
        }
      }()
      case 2: try {
        var v: Border0_Common_V1_HeartbeatMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .heartbeat(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .heartbeat(v)
        }
      }()
      case 3: try {
        var v: Border0_Common_V1_NetworkStateMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .networkState(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .networkState(v)
        }
      }()
      case 4: try {
        var v: Border0_Common_V1_PeerOnlineMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .peerOnline(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .peerOnline(v)
        }
      }()
      case 5: try {
        var v: Border0_Common_V1_PeerOfflineMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .peerOffline(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .peerOffline(v)
        }
      }()
      case 6: try {
        var v: Border0_Common_V1_DisconnectMessage?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .disconnect(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .disconnect(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .authChallenge?: try {
      guard case .authChallenge(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .heartbeat?: try {
      guard case .heartbeat(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .networkState?: try {
      guard case .networkState(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .peerOnline?: try {
      guard case .peerOnline(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .peerOffline?: try {
      guard case .peerOffline(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .disconnect?: try {
      guard case .disconnect(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_Device_V1_ServerToDeviceMessage, rhs: Border0_Device_V1_ServerToDeviceMessage) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_Device_V1_AuthChallengeMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthChallengeMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "serverPublicKey"),
    2: .same(proto: "challenge"),
    3: .same(proto: "challengeNonce"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.serverPublicKey) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.challenge) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.challengeNonce) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serverPublicKey.isEmpty {
      try visitor.visitSingularStringField(value: self.serverPublicKey, fieldNumber: 1)
    }
    if !self.challenge.isEmpty {
      try visitor.visitSingularBytesField(value: self.challenge, fieldNumber: 2)
    }
    if !self.challengeNonce.isEmpty {
      try visitor.visitSingularBytesField(value: self.challengeNonce, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_Device_V1_AuthChallengeMessage, rhs: Border0_Device_V1_AuthChallengeMessage) -> Bool {
    if lhs.serverPublicKey != rhs.serverPublicKey {return false}
    if lhs.challenge != rhs.challenge {return false}
    if lhs.challengeNonce != rhs.challengeNonce {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Border0_Device_V1_AuthChallengeSolutionMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthChallengeSolutionMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "solved"),
    2: .same(proto: "solvedNonce"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.solved) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.solvedNonce) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.solved.isEmpty {
      try visitor.visitSingularBytesField(value: self.solved, fieldNumber: 1)
    }
    if !self.solvedNonce.isEmpty {
      try visitor.visitSingularBytesField(value: self.solvedNonce, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Border0_Device_V1_AuthChallengeSolutionMessage, rhs: Border0_Device_V1_AuthChallengeSolutionMessage) -> Bool {
    if lhs.solved != rhs.solved {return false}
    if lhs.solvedNonce != rhs.solvedNonce {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
