// sets the .proto file syntax version

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: device.proto

// sets the protobuf package name (i.e. definitions namespace)

package device

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeviceManagementService_ControlStream_FullMethodName = "/border0.device.v1.DeviceManagementService/ControlStream"
)

// DeviceManagementServiceClient is the client API for DeviceManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// the stream (rpc) service for the Border0 api to manage devices
type DeviceManagementServiceClient interface {
	ControlStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DeviceToServerMessage, ServerToDeviceMessage], error)
}

type deviceManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceManagementServiceClient(cc grpc.ClientConnInterface) DeviceManagementServiceClient {
	return &deviceManagementServiceClient{cc}
}

func (c *deviceManagementServiceClient) ControlStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DeviceToServerMessage, ServerToDeviceMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DeviceManagementService_ServiceDesc.Streams[0], DeviceManagementService_ControlStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DeviceToServerMessage, ServerToDeviceMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceManagementService_ControlStreamClient = grpc.BidiStreamingClient[DeviceToServerMessage, ServerToDeviceMessage]

// DeviceManagementServiceServer is the server API for DeviceManagementService service.
// All implementations must embed UnimplementedDeviceManagementServiceServer
// for forward compatibility.
//
// the stream (rpc) service for the Border0 api to manage devices
type DeviceManagementServiceServer interface {
	ControlStream(grpc.BidiStreamingServer[DeviceToServerMessage, ServerToDeviceMessage]) error
	mustEmbedUnimplementedDeviceManagementServiceServer()
}

// UnimplementedDeviceManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeviceManagementServiceServer struct{}

func (UnimplementedDeviceManagementServiceServer) ControlStream(grpc.BidiStreamingServer[DeviceToServerMessage, ServerToDeviceMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ControlStream not implemented")
}
func (UnimplementedDeviceManagementServiceServer) mustEmbedUnimplementedDeviceManagementServiceServer() {
}
func (UnimplementedDeviceManagementServiceServer) testEmbeddedByValue() {}

// UnsafeDeviceManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceManagementServiceServer will
// result in compilation errors.
type UnsafeDeviceManagementServiceServer interface {
	mustEmbedUnimplementedDeviceManagementServiceServer()
}

func RegisterDeviceManagementServiceServer(s grpc.ServiceRegistrar, srv DeviceManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeviceManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeviceManagementService_ServiceDesc, srv)
}

func _DeviceManagementService_ControlStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceManagementServiceServer).ControlStream(&grpc.GenericServerStream[DeviceToServerMessage, ServerToDeviceMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceManagementService_ControlStreamServer = grpc.BidiStreamingServer[DeviceToServerMessage, ServerToDeviceMessage]

// DeviceManagementService_ServiceDesc is the grpc.ServiceDesc for DeviceManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "border0.device.v1.DeviceManagementService",
	HandlerType: (*DeviceManagementServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ControlStream",
			Handler:       _DeviceManagementService_ControlStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "device.proto",
}
